<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Inversion of Control</title>
 <conbody>
  <p>Buffering was actually one of the main motivations in the creation of the
    <codeph>conduit</codeph> package. To see its importance, we need to consider the approach we've
   seen so far, which we'll call inversion of control, or IoC.</p>
  <note>Inversion of control can mean different things in different circles. If you object to its
   usage here, go ahead replace it with some other phrase like "warm, fuzzy thing." I won't be
   offended.</note>
  <p>Suppose you want to count how many newline characters there are in a file. In the standard
   imperative approach, you would do someting like:</p>
  <ol id="ol_tao_tfa_xe">
   <li>Open the file</li>
   <li>Pull some data into a buffer</li>
   <li>Loop over the values in the buffer, incrementing a counter on each newline character</li>
   <li>Return to 2</li>
   <li>Close the file</li>
  </ol>
  <p>Notice that your code is explicitly calling out to other code and that code is returning
   control back to your code. You have retained full control of the flow of execution of your
   program. The conduit approach we've seen so far does <i>not</i> work this way. Instead, you
   would:</p>
  <ol id="ol_xlx_zfa_xe">
   <li>Write a sink that counts newlines and adds the result to an accumulator.</li>
   <li>Connect the sink to a source</li>
  </ol>
  <p>There's no doubt in my mind that this is an easier approach. You don't have to worry about
   opening and closing files or pulling data from the file. Instead, the data you need to process is
   simply presented to you. This is the advantage of IoC: you can focus on specifically your piece
   of the code.</p>
  <p>We use this IoC approach all over Haskell: for example, instead of <codeph>readMVar</codeph>
   and <codeph>putMVar</codeph>, you can use <codeph>withMVar</codeph>. Don't bother with
    <codeph>openFile</codeph> and <codeph>closeFile</codeph>, just use <codeph>withFile</codeph> and
   pass in a function that uses the <codeph>Handle</codeph>. Even C has a version of this: why
    <codeph>malloc</codeph> and <codeph>free</codeph> when you could just
   <codeph>alloca</codeph>?</p>
  <p>Actually, that last one is a huge red herring. Of course you can't just use
    <codeph>alloca</codeph> for everything. <codeph>alloca</codeph> only allocates memory locally on
   the stack, not dynamically on the heap. There's no way to return your allocated memory outside
   the current function.</p>
  <p>But actually, the same restriction applies to the whole family of <codeph>with</codeph>
   functions: you can never return an allocated resource outside of the "block". Usually this works
   out just fine, but we need to recognize that this <i>is</i> a change in how we structure our
   programs. Often times, with simple examples, this is a minor change. However, in larger settings
   this can become very difficult to manage, bordering on impossible at times.</p>
 </conbody>
</concept>
