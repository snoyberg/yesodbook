<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="conceptId">
 <title>Whither the request body?</title>
 <conbody>
  <p>This is all great, until we realize <i>we can't read the request body</i>. The
    <codeph>Application</codeph> is simply given the <codeph>Request</codeph>, and lives in the
    <codeph>IO</codeph> monad. It has no access whatsoever to the incoming stream of data.</p>
  <p>There's an easy fix for this actually: have the <codeph>Application</codeph> live in the
    <codeph>Sink</codeph> monad. This is the very approach we took with
    <apiname>enumerator</apiname>-based WAI 0.4. However, there are two problems:</p>
  <ul id="ul_6cdf43df-026f-4a2b-9806-baf8013379ff">
   <li>People find it confusing. What people <i>expect</i> is that the <codeph>Request</codeph>
    value would have a <codeph>requestBody</codeph> value of type <codeph>Source</codeph>.</li>
   <li>This makes certain kinds of usage incredibly difficult. For example, trying to write an HTTP
    proxy combining WAI and <codeph>http-enumerator</codeph> proved to be almost impossible.</li>
  </ul>
  <p>This is the downside of inversion of control. Our code wants to be in control. It wants to be
   given something to pull from, something to push to, and run with it. We need some solution to the
   problem.</p>
  <note>If you think that the situation I described with the proxy isn't so bad, it's because I've
   gone easy on the details. We also need to take into account streaming the response body, and the
   streaming needs to happen on both the client and server side.</note>
  <p>The simplest solution would be to just create a new <codeph>Source</codeph> and pass that to
   the <codeph>Application</codeph>. Unfortunately, this will cause problems with our buffering. You
   see, when we connect our source to the <codeph>parseRequestLine</codeph> and
    <codeph>parseRequestHeaders</codeph> sinks, it made a call to <codeph>recv</codeph>. If the data
   it received was not enough to cover all of the headers, it would issue another call. When it had
   enough data, it would stop. However, odds are that it didn't stop <i>exactly</i> at the end of
   the headers. It likely consumed a bit of the request body as well.</p>
  <p>If we just create a new source and pass that to the request, it will be missing the beginning
   of the request body. We need some way to pass that buffered data along.</p>
 </conbody>
</concept>
