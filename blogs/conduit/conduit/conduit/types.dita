<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="conceptId">
 <title>Types</title>
 <conbody>
  <p>As previously, let's start off by looking at the types involved.</p>
  <codeblock outputclass="haskell">data ConduitResult input output = Producing [output]
                                | Finished (Maybe input) [output]

data PreparedConduit input m output = PreparedConduit
    { conduitPush :: input -> ResourceT m (ConduitResult input output)
    , conduitClose :: ResourceT m [output]
    }

newtype Conduit input m output =
    Conduit { prepareConduit :: ResourceT m (PreparedConduit input m output) }</codeblock>
  <p>This should look very similar to what we've seen with sinks. A conduit can be pushed to, in
   which case it returns a result. A result either indicates that it is still producing data, or
   that it is finished. When a conduit is closed, it returns some more input. And as previously, we
   have to prepare a conduit before using it.</p>
  <p>But let's examine the idiosyncracies a bit. Like sinks, we can only push one piece of input at
   a time, and leftover data may be 0 or 1 pieces. However, there are a few changes:</p>
  <ul id="ul_5aaf20d0-ba07-4960-9fbc-c9dd5241843b">
   <li>When producing (the equivalent of processing for a sink), we can return output. This is
    because a conduit will product a new stream of output instead of producing a single output value
    at the end of processing.</li>
   <li>A sink always returns a single output value, while a conduit returns 0 or more outputs (a
    list). To understand why, consider conduits such as concatMap (produces multiple outputs for one
    input) and filter (returns 0 or 1 output for each input).</li>
   <li>We have no special constructor like SinkNoData. That's because we provide no Monad instance
    for conduits. We'll see later how you can still use a familiar Monadic approach to creating
    conduits.</li>
  </ul>
  <p>Overall sinks should seem very similar to what we've covered so far.</p>
 </conbody>
</concept>
