<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="conceptId">
 <title>Using conduits</title>
 <conbody>
  <p>The way <codeph>Conduit</codeph>s interact with the rest of the package is via
    <term>fusing</term>. A conduit can be fused into a source, producing a new source, fused into a
   sink to produce a new sink, or fused with another conduit to produce a new conduit. It's best to
   just look at the fusion operators.</p>
  <codeblock outputclass="haskell">-- Left fusion: source + conduit = source
($=) :: (Resource m, IsSource src) => src m a -> Conduit a m b -> Source m b

-- Right fusion: conduit + sink = sink
(=$) :: Resource m => Conduit a m b -> Sink b m c -> Sink a m c

-- Middle fusion: conduit + conduit = conduit
(=$=) :: Resource m => Conduit a m b -> Conduit b m c -> Conduit a m c</codeblock>
  <p>Using these operators is straightforward.</p>
  <codeblock outputclass="haskell">useConduits = do
    runResourceT
          $  CL.sourceList [1..10]
          $= reverse
          $= CL.map show
          $$ CL.consume

    -- equivalent to
    runResourceT
          $  CL.sourceList [1..10]
          $$ reverse
          =$ CL.map show
          =$ CL.consume

    -- and equivalent to
    runResourceT
          $  CL.sourceList [1..10]
          $$ (reverse =$= CL.map show)
          =$ CL.consume</codeblock>
  <p>There is in fact one last way of expressing the same idea. I'll leave it as an exercise to the
   reader to discover it.</p>
  <p>It may seem like all these different approaches are redundant. While occassionally you can in
   fact choose whichever approach you feel like using, in many cases you will need a specific
   approach. For example:</p>
  <ul id="ul_c3efe67b-809e-4b36-a534-dace20035bc7">
   <li>If you have a stream of numbers, and you want to apply a conduit (e.g., <codeph>map
     show</codeph>) to only some of the stream that will be passed to a specific sink, you'll want
    to use the right fusion operator.</li>
   <li>If you're reading a file, and want to parse the entire file as textual data, you'll want to
    use left fusion to convert the entire stream.</li>
   <li>If you want to create reusable conduits that combine together individual, smaller conduits,
    you'll use middle fusion.</li>
  </ul>
 </conbody>
</concept>
