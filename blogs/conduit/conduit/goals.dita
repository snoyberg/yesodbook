<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Goals</title>
 <conbody>
  <p>We often talk vaguely about having streaming, composable data. Let's give some concrete ideas
   of what we want out of this library:</p>
  <ul id="ul_lwt_nqx_re">
   <li>A unified interface for streaming data from and piping data into various places, whether they
    be files, sockets, or memory-based.</li>
   <li>Some technique for modifying this stream of data in some way, such as applying HTTP chunking
    to a stream of bytes of decoding a stream of bytes into a stream of characters.</li>
   <li>Deterministic resource management. If we read data from a file, we want the file to be closed
    immediately after an EOF is reached. We should not need to wait for any finalizer to be called.
    (This is a common complaint against lazy I/O.)</li>
   <li>Exception safety. All resources should be freed, even in the presence of exceptions, and even
    if those exceptions are asynchronous.</li>
   <li>Any part of the conduit pipeline- including the data consumer- should be able to safely
    acquire scarce resources and know that they will be released. (This is a downside of the
    enumerator approach, and one of our main design goals.)</li>
   <li>Conduits should interoperate well with monad transformer stacks. Almost all frameworks today
    use a monad stack in some way, and we want easy interoperability.</li>
   <li>The developer should be free to choose the control flow of the program. (This is another
    complaint against enumerator, which creates a form of "inversion of control.")</li>
   <li>Finally, conduits should be <b>simple</b>. The majority of this article should be
    understandable by almost any Haskell developer. If not, I've failed in either my writing or my
    coding.</li>
  </ul>
 </conbody>
</concept>
