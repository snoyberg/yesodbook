<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Sinks</title>
 <conbody>
  <p>A sink consumes a stream of data, and produces a result. A sink must always produce a result,
   and must always produce a single result. This is encoded in the types themselves.</p>
  <p>There is a <codeph>Monad</codeph> instance for sink, making it simple to compose multiple sinks
   together into a larger sink. You can also use the built-in sink functions to perform most of your
   work. Like sources, you'll rarely need to dive into the inner workings. Let's start off with an
   example: getting lines from a stream of <codeph>Char</codeph>s (we'll assume Unix line endings
   for simplicity).</p>
  <codeblock outputclass="haskell">import Data.Conduit
import qualified Data.Conduit.List as CL

-- Get a single line from the stream.
sinkLine :: Resource m => Sink Char m String
sinkLine = sinkState
    id -- initial state, nothing at the beginning of the line
    push
    close
  where
    -- On a new line, return the contents up until here
    push front '\n' =
        return $ StateDone Nothing $ front []

    -- Just another character, add it to the front and keep going
    push front char =
        return $ StateProcessing $ front . (char:)

    -- Got an EOF before hitting a newline, just give what we have so far
    close front = return $ front []

-- Get all the lines from the stream, until we hit a blank line or EOF.
sinkLines :: Resource m => Sink Char m [String]
sinkLines = do
    line &lt;- sinkLine
    if null line
        then return []
        else do
            lines &lt;- sinkLines
            return $ line : lines

content :: String
content = unlines
    [ "This is the first line."
    , "Here's the second."
    , ""
    , "After the blank."
    ]

main :: IO ()
main = do
    lines &lt;- runResourceT $ CL.sourceList content $$ sinkLines
    mapM_ putStrLn lines</codeblock>
  <p>Running this sample produces the expected output:</p>
  <msgblock>This is the first line.
Here's the second.</msgblock>
  <p><codeph>sinkLine</codeph> demonstrates usage of the <codeph>sinkState</codeph> function, which
   is very similar to the <codeph>sourceState</codeph> function we just saw. It takes three
   arguments: an initial state, a push function (takes the current state and next input, and returns
   a new state and result) and a close function (takes the current state and returns an output). As
   opposed to <codeph>sourceState</codeph>- which doesn't need a close function- a sink is required
   to always return a result.</p>
  <p>Our push function has two clauses. When it gets a newline character, it indicates that
   processing is complete via <codeph>StateDone</codeph>. The <codeph>Nothing</codeph> indicates
   that there is no leftover input (we'll discuss that later). It also gives an output of all the
   characters it has received. The second clause simply appends the new character to the existing
   state and indicates that we are still working via <codeph>StateProcessing</codeph>. The close
   function returns all characters.</p>
  <p><codeph>sinkLines</codeph> shows how we can use the monadic interface to produce new sinks. If
   you replace <codeph>sinkLine</codeph> with <codeph>getLine</codeph>, this would look like
   standard code to pull lines from standard input. This familiar interface should make it easy to
   get up and running quickly.</p>
 </conbody>
</concept>
