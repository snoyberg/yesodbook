<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Types</title>
 <conbody>
  <p>The types for sinks are just a bit more involved than sources. Let's have a look:</p>
  <codeblock outputclass="haskell">type SinkPush input m output = input -> ResourceT m (SinkResult input m output)
type SinkClose m output = ResourceT m output

data SinkResult input m output =
    Processing (SinkPush input m output) (SinkClose m output)
  | Done (Maybe input) output

data Sink input m output =
    SinkNoData output
  | SinkData
        { sinkPush :: SinkPush input m output
        , sinkClose :: SinkClose m output
        }
  | SinkLift (ResourceT m (Sink input m output))</codeblock>
  <p>Whenever a sink is pushed to, it can either say it needs more data
   (<codeph>Processing</codeph>) or say it's all done. When still processing, it must provided
   updated push and close function; when done, it returns any leftover inut and the output. Fairly
   straight-forward.</p>
  <p>The first real "gotcha" is the three constructors for <codeph>Sink</codeph>. Why do we need
    <codeph>SinkNoData</codeph>: aren't sinks all about consuming data? The answer is that we need
   it to efficiently implement our <codeph>Monad</codeph> instance. When we use
    <codeph>return</codeph>, we're giving back a value that requires no data in order to compute it.
   We could model this with the <codeph>SinkData</codeph> constructor, with something like:</p>
  <codeblock outputclass="haskell">myReturn a = SinkData (\input -> return (Done (Just input) a)) (return a)</codeblock>
  <p>But doing so would force reading in an extra bit of input that we don't need right now, and
   possibly will never need. (Have a look again at the <codeph>sinkLines</codeph> example.) So
   instead, we have an extra constructor to indicate that no input is required. Likewise,
    <codeph>SinkLift</codeph> is provided in order to implement an efficient
    <codeph>MonadTrans</codeph> instance.</p>
 </conbody>
</concept>
