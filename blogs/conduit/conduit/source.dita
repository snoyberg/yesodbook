<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Source</title>
 <conbody>
  <p>I think it's simplest to understand sources by looking at the types:</p>
  <codeblock outputclass="haskell">data StreamState = StreamOpen | StreamClosed
data SourceResult a = SourceResult StreamState [a]
data Source m a = Source
    { sourcePull :: ResourceT m (SourceResult a)
    , sourceClose :: ResourceT m ()
    }</codeblock>
  <p><codeph>StreamState</codeph> is a simple flag to indicate whether the stream has been closed or
   not. A <codeph>SourceResult</codeph> then tells you the state of the stream, and any data pulled.
   The <codeph>Source</codeph> itself has two operations: pull some data, or close it. Let's look at
   some of the simplest sources:</p>
  <codeblock outputclass="haskell">import Prelude hiding (repeat, cycle)
import Data.Conduit

-- | Never give any data
eof :: Monad m => Source m a
eof = Source
    { sourcePull = return $ SourceResult StreamClosed []
    , sourceClose = return ()
    }

-- | Always give the same value
repeat :: Monad m => a -> Source m a
repeat a = Source
    { sourcePull = return $ SourceResult StreamOpen [a]
    , sourceClose = return ()
    }

-- | Cycle through the same list of values
cycle :: Monad m => [a] -> Source m a
cycle as = Source
    { sourcePull = return $ SourceResult StreamOpen as
    , sourceClose = return ()
    }</codeblock>
  <p>These sources are very straight-forward, since they always return the same results.
   Additionally, their close records don't do anything. You might think that this is a bug: should a
   call to <codeph>sourcePull</codeph> return <codeph>SourceResult StreamClosed []</codeph> after
   its been closed? This isn't required, due to the invariants of a source:</p>
  <ol id="ol_vpl_mvx_re">
   <li>It is illegal to call <codeph>sourcePull</codeph> after a previous call returns
     <codeph>StreamClosed</codeph>, or after a call to <codeph>sourceClose</codeph>.</li>
   <li>It is illegal to call <codeph>sourceClose</codeph> multiple times, or after a previous
     <codeph>sourcePull</codeph> returns a <codeph>StreamClosed</codeph>.</li>
   <li>A <codeph>Source</codeph> is responsible to free any resources when either
     <codeph>sourceClose</codeph> is called or a <codeph>StreamClosed</codeph> is returned. However,
    based on the usage of <codeph>ResourceT</codeph>, this is simply an optimization. </li>
  </ol>
  <p>Don't worry too much about these invariants. In practice, you will almost never call sourcePull
   or sourceClose yourself. In fact, you hardly even write them yourself either. The point is that
   we can make some assumptions when we implement our sources.</p>
 </conbody>
</concept>
