<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Source</title>
 <conbody>
  <p>I think it's simplest to understand sources by looking at the types:</p>
  <codeblock outputclass="haskell">data SourceResult m a = Open (Source m a) a | Closed
data Source m a = Source
    { sourcePull :: ResourceT m (SourceResult m a)
    , sourceClose :: ResourceT m ()
    }</codeblock>
  <p>A source has just two operations on it: you can pull data from it, and you can close it (think
      of closing a file handle). When you pull, you either get some data and the a new
        <codeph>Source</codeph> (the source is still open), or nothing (the source is closed). Let's
      look at some of the simplest sources:</p>
  <codeblock outputclass="haskell">import Prelude hiding (repeat)
import Data.Conduit

-- | Never give any data
eof :: Monad m => Source m a
eof = Source
    { sourcePull = return Closed
    , sourceClose = return ()
    }

-- | Always give the same value
repeat :: Monad m => a -> Source m a
repeat a = Source
    { sourcePull = return $ Open (repeat a) a
    , sourceClose = return ()
    }
-- STOP
main :: IO ()
main = return ()</codeblock>
  <p>These sources are very straight-forward, since they always return the same results.
      Additionally, their close records don't do anything. You might think that this is a bug:
      shouldn't a call to <codeph>sourcePull</codeph> return <codeph>Closed</codeph> after it's been
      closed? This isn't required, since one of the rules of sources is that they can never be
      reused. In other words:</p>
    <ul id="ul_evz_rnk_df">
      <li>If a <codeph>Source</codeph> returns <codeph>Open</codeph>, it has provided you with a new
          <codeph>Source</codeph> which you should use in place of the original one.</li>
      <li>If it returns <codeph>Closed</codeph>, then you cannot perform any more operations on
        it.</li>
    </ul>
  <p>Don't worry too much about the invariant. In practice, you will almost never call
        <codeph>sourcePull</codeph> or <codeph>sourceClose</codeph> yourself. In fact, you hardly
      even write them yourself either (that's what <codeph>sourceState</codeph> and
        <codeph>sourceIO</codeph> are for). The point is that we can make some assumptions when we
      implement our sources.</p>
 </conbody>
</concept>
