<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>sourceState and sourceIO</title>
 <conbody>
  <p>With our new <codeph>Source</codeph> datatype, we also get a few convenience functions that
   allow us to create most sources without dealing directly with mutable state.
    <codeph>sourceState</codeph> let's you write code similar to how you would use the
    <codeph>State</codeph> monad. You provide an initial state, your pull function is provided with
   the current state, and it returns a new state and a return value. Let's use this to reimplement
   sourceList.</p>
  <codeblock outputclass="haskell">import Data.Conduit
import Control.Monad.Trans.Resource

-- | Provide data from the list, one element at a time.
sourceList :: Resource m => [a] -> Source m a
sourceList state0 = sourceState
    state0
    pull
  where
    pull :: Resource m => [a] -> ResourceT m ([a], SourceResult a)
    pull [] = return ([], Closed)
    pull (x:xs) = return (xs, Open x)</codeblock>
  <p>The other common activity is to perform some I/O allocation (like opening a file), registering
   some cleanup action (closing that file), and having a function for pulling data from that
   resource. <codeph>conduit</codeph> comes built-in with a <codeph>sourceFile</codeph> function
   that gives a stream of <codeph>ByteString</codeph>s. Let's write a widely inefficient alternative
   that returns a stream of characters.</p>
  <codeblock outputclass="haskell">import Data.Conduit
import Control.Monad.Trans.Resource
import System.IO
import Control.Monad.IO.Class (liftIO)

sourceFile :: ResourceIO m => FilePath -> Source m Char
sourceFile fp = sourceIO
    (openFile fp ReadMode)
    hClose
    (\h -> liftIO $ do
        eof &lt;- hIsEOF h
        if eof
            then return Closed
            else fmap Open $ hGetChar h)</codeblock>
  <p>sourceIO does a number of things for us:</p>
  <ul id="ul_rwv_vbu_se">
   <li>It registers the cleanup function with the <codeph>ResourceT</codeph> transformer, ensuring
    it gets called even in the presence of exceptions.</li>
   <li>It sets up the <codeph>sourceClose</codeph> record to release the resource immediately.</li>
   <li>As soon as you return <codeph>Closed</codeph>, it will release the resource.</li>
  </ul>
 </conbody>
</concept>
