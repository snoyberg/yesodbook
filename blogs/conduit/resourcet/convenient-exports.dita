<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Convenience Exports</title>
 <conbody>
  <p>In addition to what's been listed so far, there are a few extra functions exported (mostly) for
   convenience.</p>
  <ul id="ul_hsd_yex_re">
   <li><codeph>newRef</codeph>, <codeph>writeRef</codeph>, and <codeph>readRef</codeph> wrap up the
     <codeph>HasRef</codeph> versions of the functions and allow them to run in any
     <codeph>ResourceT</codeph>.</li>
   <li><codeph>withIO</codeph> is essentially a type-restricted version of <codeph>with</codeph>,
    but working around some of the nastiness with types you would otherwise run into. In general:
    you'll want to use <codeph>withIO</codeph> when writing <codeph>IO</codeph> code.</li>
   <li><codeph>transResourceT</codeph> let's you modify which monad your ResourceT is running in,
    assuming it keeps the same
    base.<codeblock outputclass="haskell">transResourceT :: (Base m ~ Base n)
               => (m a -> n a)
               -> ResourceT m a
               -> ResourceT n a
transResourceT f (ResourceT mx) = ResourceT (\r -> f (mx r))</codeblock></li>
  </ul>
 </conbody>
</concept>
