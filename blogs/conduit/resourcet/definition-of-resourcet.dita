<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Definition of ResourceT</title>
 <conbody>
  <p>We now have enough information to understand the definition of <codeph>ResourceT</codeph>:</p>
  <codeblock outputclass="haskell">newtype ReleaseKey = ReleaseKey Int

type RefCount = Int
type NextKey = Int

data ReleaseMap base =
    ReleaseMap !NextKey !RefCount !(IntMap (base ()))

newtype ResourceT m a =
    ResourceT (Ref (Base m) (ReleaseMap (Base m)) -> m a)</codeblock>
  <p>We see that <codeph>ReleaseKey</codeph> is simply an <codeph>Int</codeph>. If you skip a few
   lines down, this will make sense, since we're using an <codeph>IntMap</codeph> to keep track of
   the registered actions. We also define two type synonyms: <codeph>RefCount</codeph> and
    <codeph>NextKey</codeph>. <codeph>NextKey</codeph> keeps track of the most recently assigned
   value for a key, and is incremented each time <codeph>register</codeph> is called. We'll touch on
    <codeph>RefCount</codeph> later.</p>
  <p>The <codeph>ReleaseMap</codeph> is three pieces of information: the next key and the reference
   count, and then the map of all registered actions. Notice that <codeph>ReleaseMap</codeph> takes
   a type parameter <codeph>base</codeph>, which states which monad release actions must live
   in.</p>
  <p>Finally, a <codeph>ResourceT</codeph> is essentially a <codeph>ReaderT</codeph> that keeps a
   mutable reference to a <codeph>ReleaseMap</codeph>. The reference type is determined by the base
   of the monad in question, as is the cleanup monad. This is why we need to use associated
   types.</p>
  <p>The majority of the rest of the code in the <codeph>Control.Monad.Trans.Resource</codeph>
   module is just providing instances for the <codeph>ResourceT</codeph> type.</p>
 </conbody>
</concept>
