<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Goals</title>
 <conbody>
  <p>What's wrong with the following code?</p>
  <codeblock outputclass="haskell">import System.IO

main = do
    output &lt;- openFile "output.txt" WriteMode
    input  &lt;- openFile "input.txt"  ReadMode
    hGetContents input >>= hPutStr output
    hClose input
    hClose output</codeblock>
  <p>If the file <filepath>input.txt</filepath> does not exist, then an exception will be thrown
   when trying to open it. As a result, <codeph>hClose output</codeph> will never be called, and
   we'll have leaked a scarce resource (a file descriptor). In our tiny program, this isn't a big
   deal, but clearly we can't afford such waste in a long running, highly active server process.</p>
  <p>Fortunately, solving the problem is easy:</p>
  <codeblock outputclass="haskell">import System.IO

main =
    withFile "output.txt" WriteMode $ \output ->
    withFile "input.txt" ReadMode $ \input ->
    hGetContents input >>= hPutStr output</codeblock>
  <p><codeph>withFile</codeph> makes sure that the <codeph>Handle</codeph> is always closed, even in
   the presence of exceptions. It also handles asynchronous exceptions. Overall, it's a great
   approach to use... when you can use it. While often <codeph>withFile</codeph> is easy to use,
   sometimes it can require restructuring our programs. And this restructuring can range from mildly
   tedious to wildly inefficient.</p>
  <p>Let's take enumerators for example. If you look in the documentation, there is an
    <codeph>enumFile</codeph> function (for reading contents from a file), but no
    <codeph>iterFile</codeph> (for writing contents to a file). That's because the flow of control
   in an iteratee doesn't allow proper allocation of the Handle. Instead, in order to write to a
   file, you need to allocate the Handle before entering the Iteratee, e.g.:</p>
  <codeblock outputclass="haskell">import System.IO
import Data.Enumerator
import Data.Enumerator.Binary

main =
    withFile "output.txt" WriteMode $ \output ->
    run_ $ enumFile "input.txt" $$ iterHandle output</codeblock>
  <p>This code works fine, but imagine that, instead of simply piping data directly to the file,
   there was a huge amount of computation that occurred before we need to use the output handle. We
   will have allocated a file descriptor long before we needed it, and thereby locked up a scarce
   resource in our application. Besides this, there are times when we <i>can't</i> allocate the file
   before hand, such as when we won't know which file to open until we've read from the input
   file.</p>
  <p>One of the stated goals of conduits is to solve this problem, and it does so via
    <codeph>ResourceT</codeph>. As a result, the above program can be written in conduit as:</p>
  <codeblock>{-# LANGUAGE OverloadedStrings #-}
import Data.Conduit
import Data.Conduit.Binary

main = runResourceT $ sourceFile "input.txt" $$ sinkFile "output.txt"</codeblock>
 </conbody>
</concept>
