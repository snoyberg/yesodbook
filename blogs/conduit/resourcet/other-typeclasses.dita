<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Other Typeclasses</title>
 <conbody>
  <p>There are three other typeclasses provided by the module:</p>
  <dl>
   <dlentry>
    <dt>ResourceUnsafeIO</dt>
    <dd>Any monad which can lift <codeph>IO</codeph> actions into it, but that this may be
     considered unsafe. The prime candidate here is <codeph>ST</codeph>. Care should be taken to
     only lift actions which do not acquire scarce resources and which don't "fire the missiles." In
     other words, all the normal warnings of <codeph>unsafeIOToST</codeph> apply.</dd>
   </dlentry>
   <dlentry>
    <dt>ResourceThrow</dt>
    <dd>For actions that can throw exceptions. This automatically applies to all
     <codeph>IO</codeph>-based monads. For <codeph>ST</codeph>-based monads, you can use the
     supplied <codeph>ExceptionT</codeph> transformer to provide exception-throwing capabilities.
     Some functions in conduit, for example, will require this (e.g., text decoding).</dd>
   </dlentry>
   <dlentry>
    <dt>ResourceIO</dt>
    <dd>A convenience class tying together a bunch of other classes, included the two mentioned
     above. This is purely for convenience; you could achieve the same effect without this type
     class, you'd just have to do a lot more typing.</dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
