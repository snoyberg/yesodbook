<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Some Type Magic</title>
 <conbody>
  <p>As alluded to, there's a bit more to <codeph>ResourceT</codeph> than simply running in
    <codeph>IO</codeph>. Let's cover some of the things we need from this underlying
    <codeph>Monad</codeph>.</p>
  <ul id="ul_obv_tyw_re">
   <li>Mutable references to keep track of the registered release actions. You might think we could
    just use a <codeph>StateT</codeph> transformer, but then our state wouldn't survive
    exceptions.</li>
   <li>We only want to register actions in the <term>base monad</term>. For example, if we have a
     <codeph>ResourceT (WriterT [Int] IO)</codeph> stack, we only want to register
     <codeph>IO</codeph> actions. This makes it easy to lift our stacks around (i.e., add an extra
    transformer to the middle of an existing stack), and avoids confusing issues about the threading
    of other monadic side-effects.</li>
   <li>Some way to guarantee an action is performed, even in the presence of exceptions. This boils
    down to needing a <codeph>bracket</codeph>-like function.</li>
  </ul>
  <p>For the first point, we define a new typeclass to represent monads that have mutable
   references:</p>
  <codeblock outputclass="haskell">class Monad m => HasRef m where
    type Ref m :: * -> *
    newRef' :: a -> m (Ref m a)
    readRef' :: Ref m a -> m a
    writeRef' :: Ref m a -> a -> m ()
    modifyRef' :: Ref m a -> (a -> (a, b)) -> m b
    mask :: ((forall a. m a -> m a) -> m b) -> m b
    mask_ :: m a -> m a
    try :: m a -> m (Either SomeException a)</codeblock>
  <p>We have an associated type to signify what the reference type should be. (For fans of fundeps,
   you'll see in the next section that this <i>has</i> to be an associated type.) Then we provide a
   number of basic reference operations. Finally, there are some functions to help with exceptions,
   which are needed to safely implement the functions described in the last section. The instance
   for <codeph>IO</codeph> is very straight-forward:</p>
  <codeblock outputclass="haskell">instance HasRef IO where
    type Ref IO = I.IORef
    newRef' = I.newIORef
    modifyRef' = I.atomicModifyIORef
    readRef' = I.readIORef
    writeRef' = I.writeIORef
    mask = E.mask
    mask_ = E.mask_
    try = E.try</codeblock>
  <p>However, we have a problem when it comes to implementing the <codeph>ST</codeph> instance:
   there is no way to deal with exceptions in the <codeph>ST</codeph> monad. As a result,
    <codeph>mask</codeph>, <codeph>mask_</codeph> and <codeph>try</codeph> are given default
   implementations that do no exception checking. This gives rise to the first word of warning:
    <b>operations in the ST monad are not exception safe</b>. You should not be allocating scarce
   resources in ST when using <codeph>ResourceT</codeph>. You might be wondering why bother with
    <codeph>ResourceT</codeph> at all then for <codeph>ST</codeph>. The answer is that there is a
   lot you can do with conduits without allocating scarce resources, and <codeph>ST</codeph> is a
   great way to do this in a pure way. But more on this later.</p>
  <p>Now onto point 2: we need some way to deal with this base monad concept. Again, we use an
   associated type (again explained in the next section). Our solution looks something like:</p>
  <codeblock outputclass="haskell">class (HasRef (Base m), Monad m) => Resource m where
    type Base m :: * -> *

    resourceLiftBase :: Base m a -> m a</codeblock>
  <p>But we forgot about point 3: some <codeph>bracket</codeph>-like function. So we need one more
   method in this typeclass:</p>
  <codeblock outputclass="haskell">    resourceBracket_ :: Base m a -> Base m b -> m c -> m c</codeblock>
  <p>The reason the first two arguments to <codeph>resourceBracket_</codeph> (allocation and
   cleanup) live in <codeph>Base m</codeph> instead of <codeph>m</codeph> is that, in
    <codeph>ResourceT</codeph>, all allocation and cleanup lives in the base monad.</p>
  <p>So on top of our <codeph>HasRef</codeph> instance for <codeph>IO</codeph>, we now need a
    <codeph>Resource</codeph> instance as well. This is similarly straight-forward:</p>
  <codeblock outputclass="haskell">instance Resource IO where
    type Base IO = IO
    resourceLiftBase = id
    resourceBracket_ = E.bracket_</codeblock>
  <p>We have similar <codeph>ST</codeph> instances, with <codeph>resourceBracket_</codeph> having no
   exception safety. The final step is dealing with monad transformers. We don't need to provide a
    <codeph>HasRef</codeph> instance, but we do need a <codeph>Resource</codeph> instance. The
   tricky part is providing a valid implementation of <codeph>resourceBracket_</codeph>. For this,
   we use some functions from <apiname>monad-control</apiname>:</p>
  <codeblock outputclass="haskell">instance (MonadTransControl t, Resource m, Monad (t m))
        => Resource (t m) where
    type Base (t m) = Base m

    resourceLiftBase = lift . resourceLiftBase
    resourceBracket_ a b c =
        control' $ \run -> resourceBracket_ a b (run c)
      where
        control' f = liftWith f >>= restoreT . return</codeblock>
  <p>For any transformer, its base is the base of its inner monad. Similarly, we lift to the base by
   lifting to the inner monad and then lifting to the base from there. The tricky part is the
   implemetnation of <codeph>resourceBracket_</codeph>. I will not go into a detailed explanation,
   as I would simply make a fool of myself.</p>
 </conbody>
</concept>
