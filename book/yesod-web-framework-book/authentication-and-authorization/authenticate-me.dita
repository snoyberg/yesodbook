<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_d1y_t2f_p2">
 <title id="x-1">Authenticate Me</title>
 <conbody id="x-2">
  <p id="x-3">Let's jump right in with an example of authentication.</p>
  <codeblock id="x-4" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TemplateHaskell, TypeFamilies,
             MultiParamTypeClasses, QuasiQuotes #-}
import Yesod
import Yesod.Auth
import Yesod.Auth.BrowserId
import Yesod.Auth.GoogleEmail
import Data.Text (Text)
import Network.HTTP.Conduit (Manager, newManager, def)

data MyAuthSite = MyAuthSite
    { httpManager :: Manager
    }

mkYesod "MyAuthSite" [parseRoutes|
/ RootR GET
/auth AuthR Auth getAuth
|]

instance Yesod MyAuthSite where
    -- Note: In order to log in with BrowserID, you must correctly
    -- set your hostname here.
    approot _ = "http://localhost:3000"

instance YesodAuth MyAuthSite where
    type AuthId MyAuthSite = Text
    getAuthId = return . Just . credsIdent

    loginDest _ = RootR
    logoutDest _ = RootR

    authPlugins =
        [ authBrowserId
        , authGoogleEmail
        ]

    authHttpManager = httpManager

instance RenderMessage MyAuthSite FormMessage where
    renderMessage _ _ = defaultFormMessage

getRootR :: Handler RepHtml
getRootR = do
    maid &lt;- maybeAuthId
    defaultLayout [whamlet|
&lt;p&gt;Your current auth ID: #{show maid}
$maybe _ &lt;- maid
    &lt;p&gt;
        &lt;a href=@{AuthR LogoutR}&gt;Logout
$nothing
    &lt;p&gt;
        &lt;a href=@{AuthR LoginR}&gt;Go to the login page
|]

main :: IO ()
main = do
    man &lt;- newManager def
    warpDebug 3000 $ MyAuthSite man</codeblock>
  <p id="x-5">We'll start with the route declarations. First we declare our standard <codeph id="x-6">RootR</codeph>
   route, and then we set up the authentication subsite. Remember that a subsite needs four
   parameters: the path to the subsite, the route name, the subsite name, and a function to get the
   subsite value. In other words, based on the line:</p>
  <codeblock id="x-7" outputclass="routes">/auth AuthR Auth getAuth</codeblock>
  <p id="x-8">We need to have <codeph id="x-9">getAuth :: MyAuthSite -&gt; Auth</codeph>. While we haven't written that
   function ourselves, <apiname id="x-10">yesod-auth</apiname> provides it automatically. With other subsites
   (like static files), we provide configuration settings in the subsite value, and therefore need
   to specify the get function. In the auth subsite, we specify these settings in a separate
   typeclass, <codeph id="x-11">YesodAuth</codeph>.</p>
  <note id="x-12">Why not use the subsite value? There are a number of settings we would like to give for an
   auth subsite, and doing so from a record type would be inconvenient. Also, since we want to have
   an <codeph id="x-13">AuthId</codeph> associated type, a typeclass is more natural.<p id="x-14">On the flip side, why
    not use a typeclass for all subsites? It comes with a downside: you can then only have a single
    instance per site, disallowing serving different sets of static files from different routes.
    Also, the subsite value works better when we want to load data at app initialization.</p></note>
  <p id="x-15">So what exactly goes in this YesodAuth instance? There are six required
   declarations:</p>
  <ul id="ul_mgj_phf_p2">
   <li id="x-16"><codeph>AuthId</codeph> is an associated type. This is the value
     <codeph>yesod-auth</codeph> will give you when you ask if a user is logged in (via
     <codeph>maybeAuthId</codeph> or <codeph>requireAuthId</codeph>). In our case, we're simply
    using <codeph>Text</codeph>, to store the raw identifier- email address in our case, as we'll
    soon see.</li>
   <li id="x-17"><codeph>getAuthId</codeph> gets the actual <codeph>AuthId</codeph> from the <codeph
     id="x-18">Creds</codeph> (credentials) data type. This type has three pieces of information:
    the authentication backend used (browserid or googleemail in our case), the actual identifier,
    and an associated list of arbitrary extra information. Each backend provides different extra
    information; see their docs for more information.</li>
   <li id="x-19"><codeph>loginDest</codeph> gives the route to redirect to after a successful
    login.</li>
   <li id="x-20">Likewise, <codeph>logoutDest</codeph> gives the route to redirect to after a
    logout.</li>
   <li id="x-21"><codeph>authPlugins</codeph> is a list of individual authentication backends to
    use. In our example, we're using BrowserID, which logs in via Mozilla's BrowserID system, and
    Google Email, which authenticates a user's email address using their Google account. The nice
    thing about these two backends is:<ul id="ul_xwj_f3f_p2">
     <li id="x-22">They require no set up, as opposed to Facebook or OAuth, which require setting up
      credentials.</li>
     <li id="x-23">They use email addresses as identifiers, which people are comfortable with, as
      opposed to OpenID, which uses a URL.</li>
    </ul></li>
   <li><codeph>authHttpManager</codeph> gets an HTTP connection manager from the foundation type.
    This allow authentication backends which use HTTP connections (i.e., almost all third-party
    login systems) to share connections, avoiding the cost of restarting a TCP connection for each
    request.</li>
  </ul>
  <p id="x-24">In our <codeph>RootR</codeph> handler, we have some simple links to the login and
   logout pages, depending on whether or not the user is logged in. Notice how we construct these
   subsite links: first we give the subsite route name (<codeph>AuthR</codeph>), followed by the
   route within the subsite (<codeph>LoginR</codeph> and <codeph>LogoutR</codeph>).</p>
  <p id="x-25">The figures below show what the login process looks like from a user perspective.</p>
  <fig id="x-26">
   <title id="x-27">Initial page load</title>
   <image href="initial-screen.png" id="image_vw4_r3f_p2"/>
  </fig>
  <fig id="x-28">
   <title id="x-29">BrowserID login screen</title>
   <image href="login-with-browserid.png" id="image_jp4_t3f_p2"/>
  </fig>
  <fig id="x-30">
   <title id="x-31">Homepage after logging in</title>
   <image href="after-login.png" id="image_gz2_v3f_p2"/>
  </fig>
 </conbody>
</concept>
