<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Authorization</title>
 <conbody id="x-2">
  <p id="x-3">Once you can authenticate your users, you can use their credentials to <i id="x-4">authorize</i> requests. Authorization in Yesod is simple and declarative: most of
            the time, you just need to add the <codeph id="x-12">authRoute</codeph> and
                <codeph id="x-13">isAuthorized</codeph> methods to your Yesod typeclass instance. Let's see an
            example.</p>
  <codeblock id="x-5" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TemplateHaskell, TypeFamilies,
             MultiParamTypeClasses, QuasiQuotes #-}
import Yesod
import Yesod.Auth
import Yesod.Auth.Dummy -- just for testing, don't use in real life!!!
import Data.Text (Text)
import Network.HTTP.Conduit (Manager, newManager, def)

data MyAuthSite = MyAuthSite
    { httpManager :: Manager
    }

mkYesod "MyAuthSite" [parseRoutes|
/ RootR GET POST
/admin AdminR GET
/auth AuthR Auth getAuth
|]

instance Yesod MyAuthSite where
    authRoute _ = Just $ AuthR LoginR

    -- route name, then a boolean indicating if it's a write request
    isAuthorized RootR True = isAdmin
    isAuthorized AdminR _ = isAdmin

    -- anyone can access other pages
    isAuthorized _ _ = return Authorized

isAdmin = do
    mu &lt;- maybeAuthId
    return $ case mu of
        Nothing -&gt; AuthenticationRequired
        Just "admin" -&gt; Authorized
        Just _ -&gt; Unauthorized "You must be an admin"

instance YesodAuth MyAuthSite where
    type AuthId MyAuthSite = Text
    getAuthId = return . Just . credsIdent

    loginDest _ = RootR
    logoutDest _ = RootR

    authPlugins _ = [authDummy]

    authHttpManager = httpManager

instance RenderMessage MyAuthSite FormMessage where
    renderMessage _ _ = defaultFormMessage

getRootR :: Handler RepHtml
getRootR = do
    maid &lt;- maybeAuthId
    defaultLayout [whamlet|
&lt;p&gt;Note: Log in as "admin" to be an administrator.
&lt;p&gt;Your current auth ID: #{show maid}
$maybe _ &lt;- maid
    &lt;p&gt;
        &lt;a href=@{AuthR LogoutR}&gt;Logout
&lt;p&gt;
    &lt;a href=@{AdminR}&gt;Go to admin page
&lt;form method=post&gt;
    Make a change (admins only)
    \ #
    &lt;input type=submit&gt;
|]

postRootR :: Handler ()
postRootR = do
    setMessage "You made some change to the page"
    redirect RootR

getAdminR :: Handler RepHtml
getAdminR = defaultLayout [whamlet|
&lt;p&gt;I guess you're an admin!
&lt;p&gt;
    &lt;a href=@{RootR}&gt;Return to homepage
|]

main :: IO ()
main = do
    manager &lt;- newManager def
    warpDebug 3000 $ MyAuthSite manager</codeblock>
  <p id="x-6"><codeph id="x-14">authRoute</codeph> should be your login page, almost always
                <codeph id="x-15">AuthR</codeph>
            <codeph id="x-16">LoginR</codeph>. <codeph id="x-17">isAuthorized</codeph> is a function that takes two
            parameters: the requested route, and whether or not the request was a "write" request.
            You can actually change the meaning of what a write request is using the
                <codeph id="x-18">isWriteRequest</codeph> method, but the out-of-the-box version follows
            RESTful principles: anything but a <codeph id="x-19">GET</codeph>, <codeph id="x-20">HEAD</codeph>,
                <codeph id="x-21">OPTIONS</codeph> or <codeph id="x-22">TRACE</codeph> request is a write request.</p>
  <p id="x-7">What's convenient about the body of <codeph id="x-23">isAuthorized</codeph> is that you can run
            any <codeph id="x-24">Handler</codeph> code you want. This means you can:</p>
  <ul id="ul_tew_ill_pe">
   <li id="x-8">Access the filesystem (normal IO)</li>
   <li id="x-9">Lookup values in the database</li>
   <li id="x-10">Pull any session or request values you want</li>
  </ul>
  <p id="x-11">Using these techniques, you can develop as sophisticated an authorization system as you like,
   or even tie into existing systems used by your organization.</p>
 </conbody>
</concept>
