<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="overview">
 <title>Overview</title>
 <conbody>
  <p>The <apiname>yesod-auth</apiname> package provides a unified interface for a number of
   different authentication plugins. The only real requirement for these backends is that they
   identify a user based on some unique string. In OpenID, for instance, this would be the actual
   OpenID value. In BrowserID, it's the email address. For HashDB (which uses a hashed database of
   passwords), it's the username.</p>
  <p>Each authentication plugin provides its own system for logging in, whether it be via passing
   tokens with an external site or a simple email/password form. After a successful login, the
   plugin sets a value in the user's session to indicate his/her AuthId. This AuthId is usually a
   Persistent ID from a table used for keeping track of users.</p>
  <p>There are a few functions available for querying a user's AuthId, most commonly
    <codeph>maybeAuthId</codeph>, <codeph>requireAuthId</codeph>, <codeph>maybeAuth</codeph> and
    <codeph>requireAuth</codeph>. The require versions will redirect to a login page if the user is
   not logged in, while the second set of functions (the ones <b>not</b> ending in Id) give both the
   table ID <i>and</i> entity value.</p>
  <p>Since all of the storage of AuthId is built on top of sessions, all of the rules from there
   apply. In particular, the data is stored in an encrypted, HMACed client cookie, which
   automatically times out after a certain configurable period of inactivity. Additionally, since
   there is no server-side component to sessions, logging out simply deletes the data from the
   session cookie; if a user reuses an older cookie value, the session will still be valid.</p>
  <note>There are plans to add in a server-side component to sessions which would allow forced
   logout. This will almost certainly be implemented before a 1.0 release of Yesod.</note>
  <p>On the flip side, authorization is handled by a few methods inside the Yesod typeclass. For
   every request, these methods are run to determine if access should be allowed, denied, or if the
   user needs to be authenticated. By default, these methods allow access for every request.
   Alternatively, you can implement authorization in a more ad-hoc way by adding calls to
   requireAuth and the like within individual handler functions, though this undermines many of the
   benefits of a declarative authorization system.</p>
 </conbody>
</concept>
