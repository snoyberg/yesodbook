<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="handler-function"><title id="x-1">Handler function</title><conbody id="x-2">
        <p id="x-3">So we have a route named HomeR, and it responds to GET requests. How do you define your
            response? You write a <term id="x-4">handler function</term>. Yesod follows a very simple naming
            scheme for these functions: it's the lower case method name (e.g., GET becomes get)
            followed by the route name. So here, the function name would be
                <codeph id="x-5">getHomeR</codeph>.</p><p id="handler1">Most of the code you write in Yesod lives in handler functions. This is where you
            process user input, perform database queries and create responses. In our simple
            example, we create a response using the <codeph id="x-6">defaultLayout</codeph> function. This
            function wraps up the content it's given in your site's template. By default, it
            produces a simple HTML file including a doctype, html, head and body tags. <xref id="x1" href="../yesod-typeclass/yesod-typeclass.dita">As we'll
                see later</xref>, this function can be overridden to do much more.</p><p id="handler2">In our example, we pass <codeph id="x2">[whamlet|Hello World!|]</codeph> to
                <codeph id="x-7">defaultLayout</codeph>. <codeph id="x-8">whamlet</codeph> is another quasi-quoter. In
            this case, it converts Hamlet syntax into a Widget. Hamlet is the default HTML
            templating engine in Yesod. Together with its siblings Cassius, Lucius and Julius, you
            can create HTML, CSS and Javascript in a fully type-safe and compile-time-checked
            manner. We'll see much more about this in <xref id="x-9" href="../shakespearean-templates/shakespearean-templates.dita#shakespearean-templates" format="dita">the Shakespeare chapter</xref>.</p>
        <p id="x-10">Widgets are another cornerstone of Yesod. They allow you to create modular components of
            a site consisting of HTML, CSS and Javascript and reuse them throughout your site. We'll
            get into more detail on them in <xref id="x-11" href="../widgets-09/widgets.dita#widgets" format="dita">their own chapter</xref>.</p></conbody></concept>