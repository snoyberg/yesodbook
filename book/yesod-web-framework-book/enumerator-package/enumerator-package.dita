<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="enumerator-package"><title id="x-1">Enumerator Package</title><conbody id="x-2">
        <note id="x-3">Due to the fact that Yesod has moved on to <xref id="x-4" href="http://www.yesodweb.com/book/conduit" format="html" scope="external">conduits</xref>, this chapter will no longer be included in the actual Yesod book.
            It is kept on the site as a reference for those who are still using it.</note><p id="intro1">One of the upcoming patterns in Haskell is <term id="x1">enumerators</term>. They are designed to solve the problems of producing, modifying and consuming streams of data. Enumerators are considered a bit intimidating, possibly because:</p><ul id="x2"><li id="x3">There are multiple implementations, all with slightly different approaches.</li><li id="x4">Some of the implementations (in my opinion) use incredibly confusing naming.</li><li id="x5">The tutorials that get written usually don't directly target an existing implementation, and work more on building up intuition than giving instructions on how to use the library.</li></ul><p id="intro2">The Yesod framework uses enumerators behind the scenes in a number of places: in WAI/Warp for dealing with request and response bodies, in Persistent for receiving the results from a database query, and in various side packages like <apiname id="x6">http-enumerator</apiname> and <apiname id="x7">xml-enumerator</apiname>. We always use the <apiname id="x8">enumerator</apiname> package. That package is the topic of this chapter.</p><p id="intro3">This chapter is composed of three main sections, each dealing with one of the main concepts:</p><ul id="x9"><li id="x10">We start with <term id="x11">iteratees</term>, which are <b id="x12">consumers</b>. They are fed data and do something with it.</li><li id="x13">Next we cover <term id="x14">enumerators</term> which are <b id="x15">producers</b>. They feed data to an iteratee.</li><li id="x16">Finally, we address <term id="x17">enumeratees</term>. These are <b id="x18">pipes</b> which are fed data from an enumerator and in turn feed data to an iteratee.</li></ul><note id="x19" type="other" othertype="advanced"><p id="intro4">You may be wondering why we bother with this, when most of these problems can be addressed by lazy I/O. The basic problem with lazy I/O is its non-determinism. For more information, it's best to go to the original source on this topic: <xref id="x20" href="http://okmij.org/ftp/Streams.html#iteratee" scope="external" format="html">Oleg</xref>.</p></note></conbody></concept>