<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="extracting-a-value"><title id="x-1">Extracting a value</title><conbody id="x-2"><p id="extract1">So far, we've written a few iteratees, but we still don't know how to extract values from them. To start, let's remember that <codeph id="x1">Iteratee</codeph> is just a newtype wrapper around <codeph id="x2">Step</codeph>:</p><codeblock outputclass="haskell" id="x3">newtype Iteratee a m b = Iteratee { runIteratee :: m (Step a m b) }</codeblock><p id="extract2">First we need to unwrap the Iteratee and deal with the Step value inside. Remember also that Step has three constructors: Continue, Yield and Error. We'll handle the Error constructor by returning our result in an Either. Yield already provides the data we're looking for.</p><p id="extract3">The tricky case is Continue: here, we have an iteratee that is still expecting more data. This is where the EOF constructor comes in handy: it's our little way to tell the iteratee to finish what it's doing and get on with things. If you remember from above, I said a well-behaving iteratee will never return a Continue after receiving an EOF; now we'll see why:</p><codeblock outputclass="haskell" id="x4">extract :: Monad m =&gt; Iteratee a m b -&gt; m (Either SomeException b)
extract (Iteratee mstep) = do
    step &lt;- mstep
    case step of
        Continue k -&gt; do
            let Iteratee mstep' = k EOF
            step' &lt;- mstep'
            case step' of
                Continue _ -&gt; error "Misbehaving iteratee"
                Yield b _ -&gt; return $ Right b
                Error e -&gt; return $ Left e
        Yield b _ -&gt; return $ Right b
        Error e -&gt; return $ Left e</codeblock><p id="extract4">Fortunately, you don't need to redefine this yourself: enumerator includes both a
                <xref id="x5" href="http://hackage.haskell.org/packages/archive/enumerator/0.4.0.2/doc/html/Data-Enumerator.html#v:run" scope="external" format="html">run</xref> and <xref id="x6" href="http://hackage.haskell.org/packages/archive/enumerator/0.4.0.2/doc/html/Data-Enumerator.html#v:run_" scope="external" format="html">run_</xref> function. Let's go ahead and use it on
            our sum6 function:</p><codeblock outputclass="haskell" id="x7">run_ = return
sum6 = 5 :: Int
-- START
main = run_ sum6 &gt;&gt;= print</codeblock><p id="extract5">If you run this, the result will be 0. This emphasizes an important point: an iteratee is not just <i id="x8">how</i> to process incoming data, <b id="x9">it is the state of the processing</b>. In this case, we haven't done anything to change the initial state of sum6, so we still have the initial value of 0.</p><p id="extract6">To give an analogy: think of an iteratee as a machine. When you feed it data, you modify the internal state but you can't see any of those changes on the outside. When you are done feeding the data, you press a button and it spits out the result. If you don't feed in any data, your result is the initial state.</p></conbody></concept>