<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="some-built-in-enumerators"><title id="x-1">Some built-in enumerators</title><conbody id="x-2"><p id="builtin1">Of course, writing a whole function just to pass some numbers to our sum function seems a bit tedious. We could easily make the list an argument to the function:</p><codeblock outputclass="haskell" id="x1">sum12 :: Monad m =&gt; [Int] -&gt; Enumerator Int m Int
sum12 nums (Continue k) = k $ Chunks nums
sum12 _ step = returnI step</codeblock><p id="builtin2">But now there's not even anything Int-specific in our function. We could easily generalize this to:</p><codeblock outputclass="haskell" id="x2">genericSum12 :: Monad m =&gt; [a] -&gt; Enumerator a m b
genericSum12 nums (Continue k) = k $ Chunks nums
genericSum12 _ step = returnI step</codeblock><p id="builtin3">And in fact, enumerator comes built in with the <xref id="x3" href="http://hackage.haskell.org/packages/archive/enumerator/0.4.0.2/doc/html/Data-Enumerator.html#v:enumList" scope="external" format="html">enumList</xref> function which does
                        this. enumList also takes an Integer argument to indicate the maximum number
                        of elements to stick in a chunk. For example, we could write:</p><codeblock outputclass="haskell" id="x4">run_ (enumList 5 [1..30] $$ sum6) &gt;&gt;= print</codeblock><p id="builtin4">(That produces 465 if you're counting.) The first argument to enumList should never affect the result, though it may have some performance impact.</p><p id="builtin5">Data.Enumerator includes two other enumerators: <xref id="x5" href="http://hackage.haskell.org/packages/archive/enumerator/0.4.0.2/doc/html/Data-Enumerator.html#v:enumEOF" scope="external" format="html">enumEOF</xref> simply passes an EOF
                        to the iteratee. <xref id="x6" href="http://hackage.haskell.org/packages/archive/enumerator/0.4.0.2/doc/html/Data-Enumerator.html#v:concatEnums" scope="external" format="html">concatEnums</xref> is slightly more
                        interesting; it combines multiple enumerators together. For example:</p><codeblock outputclass="haskell" id="x7">run_ (concatEnums
        [ enumList 1 [1..10]
        , enumList 1 [11..20]
        , enumList 1 [21..30]
        ] $$ sum6) &gt;&gt;= print</codeblock><p id="builtin6">This also produces 465.</p></conbody></concept>