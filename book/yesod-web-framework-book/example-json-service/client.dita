<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="client"><title id="x-1">Client</title><conbody id="x-2">
  <p id="x1"><apiname id="x2">http-enumerator</apiname> was written as a companion to WAI. It too
            uses enumerator and blaze-builder pervasively, meaning we once again get easy interop
            with aeson. A few extra comments for those not familiar with http-enumerator:</p>
  <ul id="ul_4be25b01-52e2-414f-ba22-d6c0b97232c8">
   <li id="x3">A <codeph id="x4">Manager</codeph> is present to keep track of open connections, so that multiple
    requests to the same server use the same connection. You usually want to use the
     <codeph id="x5">withManager</codeph> function to create and clean up this Manager, since it is
    exception safe.</li>
   <li id="x6">We need to know the size of our request body, which can't be determined directly from a
    Builder. Instead, we convert the Builder into a lazy ByteString and take the size from
    there.</li>
   <li id="x7">There are a number of different functions for initiating a request. We use http, which allows
    us to directly access the data stream. There are other higher level functions (such as httpLbs)
    that let you ignore the issues of enumerators and get the entire body directly.</li>
  </ul>
  <codeblock outputclass="haskell" id="x8">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Enumerator
    ( http, parseUrl, withManager, RequestBody (RequestBodyLBS)
    , requestBody
    )
import Data.Aeson (Value (Object, String))
import qualified Data.Map as Map
import Data.Aeson.Parser (json)
import Data.Attoparsec.Enumerator (iterParser)
import Control.Monad.IO.Class (liftIO)
import Data.Enumerator (run_)
import Data.Aeson.Encode (fromValue)
import Blaze.ByteString.Builder (toLazyByteString)

main :: IO ()
main = withManager $ \manager -&gt; do
    value &lt;- makeValue
    -- We need to know the size of the request body, so we convert to a
    -- ByteString
    let valueBS = toLazyByteString $ fromValue value
    req' &lt;- parseUrl "http://localhost:3000/"
    let req = req' { requestBody = RequestBodyLBS valueBS }
    run_ $ flip (http req) manager $ \status headers -&gt; do
        -- Might want to ensure we have a 200 status code and Content-Type is
        -- application/json. We skip that here.
        resValue &lt;- iterParser json
        liftIO $ handleResponse resValue

-- Application-specific function to make the request value
makeValue :: IO Value
makeValue = return $ Object $ Map.fromList
    [ ("foo", String "bar")
    ]

-- Application-specific function to handle the response from the server
handleResponse :: Value -&gt; IO ()
handleResponse = print</codeblock>
 </conbody></concept>