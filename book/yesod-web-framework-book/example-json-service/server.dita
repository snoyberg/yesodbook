<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="server"><title id="x-1">Server</title><conbody id="x-2">
  <p id="x1">WAI uses the <apiname id="x2">enumerator</apiname> package to handle streaming request bodies, and
   efficiently generates responses using <apiname id="x3">blaze-builder</apiname>. <apiname id="x4">aeson</apiname>
   uses <apiname id="x5">attoparsec</apiname> for parsing; by using <apiname id="x6">attoparsec-enumerator</apiname>
   we get easy interoperability with WAI. And aeson can encode JSON directly into a Builder. This
   plays out as:</p>
  <codeblock outputclass="haskell" id="x7">{-# LANGUAGE OverloadedStrings #-}
import Network.Wai (Response (ResponseBuilder), Application)
import Network.HTTP.Types (status200, status400)
import Network.Wai.Handler.Warp (run)
import Data.Aeson.Parser (json)
import Data.Attoparsec.Enumerator (iterParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (Value (Object, String))
import Data.Aeson.Encode (fromValue)
import Data.Enumerator (catchError, Iteratee)
import Control.Exception (SomeException)
import Data.ByteString (ByteString)
import qualified Data.Map as Map
import Data.Text (pack)

main :: IO ()
main = run 3000 app

app :: Application
app _ = flip catchError invalidJson $ do
    value &lt;- iterParser json
    newValue &lt;- liftIO $ modValue value
    return $ ResponseBuilder
        status200
        [("Content-Type", "application/json")]
        $ fromValue newValue

invalidJson :: SomeException -&gt; Iteratee ByteString IO Response
invalidJson ex = return $ ResponseBuilder
    status400
    [("Content-Type", "application/json")]
    $ fromValue $ Object $ Map.fromList
        [ ("message", String $ pack $ show ex)
        ]

-- Application-specific logic would go here.
modValue :: Value -&gt; IO Value
modValue = return</codeblock>
 </conbody></concept>