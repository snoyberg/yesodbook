<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="forms"><title id="x-1">Forms</title><conbody id="x-2">
  <p id="x1">I've mentioned the boundary issue already: whenever data enters or leaves an
   application, we need to validate it. Probably the most difficult place this occurs is forms.
   Coding forms is complex; in an ideal world, we'd like a solution that addresses the following
   problems:</p>
  <ul id="ul_fvy_beg_md">
   <li id="x2">Ensure data is valid.</li>
   <li id="x3">Marshal string data in the form submission to Haskell datatypes.</li>
   <li id="x4">Generate HTML code for displaying the form.</li>
   <li id="x5">Generate Javascript to do clientside validation and provide more user-friendly widgets, such
    as date pickers.</li>
   <li id="x6">Build up more complex forms by combining together simpler forms.</li>
   <li id="x7">Automatically assign names to our fields that are guaranteed to be unique.</li>
  </ul>
  <p id="x8">The <apiname id="x9">yesod-form</apiname> package provides all these features in a simple, declarative
   API. It builds on top of Yesod's widgets to simplify styling of forms and applying Javascript
   appropriately. And like the rest of Yesod, it uses Haskell's type system to make sure everything
   is working correctly.</p>
 </conbody></concept>