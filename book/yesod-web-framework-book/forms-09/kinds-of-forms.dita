<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="kinds-of-forms"><title id="x-1">Kinds of Forms</title><conbody id="x-2">
  <p id="x1">Before jumping into the types themselves, we should begin with an overview of the different
   kinds of forms. There are three categories:</p>
  <dl id="x2">
   <dlentry id="x3">
    <dt id="x4">Applicative</dt>
    <dd id="x5">These are the most commonly used (it's what appeared in the synopsis). Applicative
     gives us some nice properties of letting error messages coallesce together and keep a very
     high-level, declarative approach. (For more information on applicative code, see <xref
      href="http://www.haskell.org/haskellwiki/Applicative_functor" format="html" scope="external"
      >the Haskell wiki</xref>.)</dd>
   </dlentry>
   <dlentry id="x6">
    <dt id="x7">Monadic</dt>
    <dd id="x8">A more powerful alternative to applicative. While this allows you more flexibility,
     it does so at the cost of being more verbose. Useful if you want to create forms that don't fit
     into the standard two-column look.</dd>
   </dlentry>
   <dlentry id="x9">
    <dt id="x10">Input</dt>
    <dd id="x11">Used only for receiving input. Does not generate any HTML for receiving the user input.
     Useful for interacting with existing forms.</dd>
   </dlentry>
  </dl>
  <p id="x12">In addition, there are a number of different variables that come into play for each form and
   field you will want to set up:</p>
  <ul id="ul_ibl_vig_md">
   <li id="x13">Is the field required or optional?</li>
   <li id="x14">Should it be submitted with GET or POST?</li>
   <li id="x15">Does it have a default value, or not?</li>
  </ul>
  <p id="x16">An overriding goal is to minimize the number of field definitions and let them work in
   as many contexts as possible. One result of this is that we end up with a few extra words for
   each field. In the synopsis, you may have noticed things like <codeph id="x-3">areq</codeph> and that
   extra <codeph id="x-4">Nothing</codeph> parameter. We'll cover why all of those exist in the course of
   this chapter, but for now realize that by making these parameters explicit, we are able to reuse
   the individuals fields (like <apiname id="x17">yesod-form:Yesod.Form.Fields:intField</apiname>)
   in many different ways.</p>
  <p id="x-5">A quick note on naming conventions. Each form type has a one-letter prefix (A, M and I) which
   is used in a few places, such as saying MForm. We also use req and opt to mean required and
   optional. Combining these, we create a required applicative field with <codeph id="x-6">areq</codeph>, or
   an optional input field with <codeph id="x-7">iopt</codeph>.</p>
 </conbody></concept>