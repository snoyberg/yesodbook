<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="monadic">
    <title id="x-1">Monadic Forms</title>
    <conbody id="x-2">
        <p id="x-3">Often times, a simple form layout is adequate, and applicative forms excel at
            this approach. Sometimes, however, you'll want to have a more customized look to your
            form.</p>
        <fig id="x-4">
            <title id="x-5">A non-standard form layout</title>
            <image id="image_d604c9d5-b1e2-447a-a3ee-efe4559f0d2f" href="monadic-form.png"/>
        </fig>
        <p id="x-6">For these use cases, monadic forms fit the bill. They are a bit more verbose
            than their applicative cousins, but this verbosity allows you to have complete control
            over what the form will look like. In order to generate the form above, we could code
            something like this.</p>
        <codeblock id="x-7" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, MultiParamTypeClasses #-}
import Yesod
import Control.Applicative
import Data.Text (Text)

data Monadic = Monadic

mkYesod "Monadic" [parseRoutes|
/ RootR GET
|]

instance Yesod Monadic where
    approot _ = ""

instance RenderMessage Monadic FormMessage where
    renderMessage _ _ = defaultFormMessage

data Person = Person { personName :: Text, personAge :: Int }
    deriving Show

personForm :: Html -&gt; MForm Monadic Monadic (FormResult Person, Widget)
personForm extra = do
    (nameRes, nameView) &lt;- mreq textField "this is not used" Nothing
    (ageRes, ageView) &lt;- mreq intField "neither is this" Nothing
    let personRes = Person &lt;$&gt; nameRes &lt;*&gt; ageRes
    let widget = do
            toWidget [lucius|
##{fvId ageView} {
    width: 3em;
}
|]
            [whamlet|
#{extra}
&lt;p&gt;
    Hello, my name is #
    ^{fvInput nameView}
    \ and I am #
    ^{fvInput ageView}
    \ years old. #
    &lt;input type=submit value="Introduce myself"&gt;
|]
    return (personRes, widget)

getRootR :: Handler RepHtml
getRootR = do
    ((res, widget), enctype) &lt;- runFormGet personForm
    defaultLayout [whamlet|
&lt;p&gt;Result: #{show res}
&lt;form enctype=#{enctype}&gt;
    ^{widget}
|]

main :: IO ()
main = warpDebug 3000 Monadic</codeblock>
        <p id="x-8">Similar to the applicative <codeph id="x-9">areq</codeph>, we use <codeph
                id="x-10">mreq</codeph> for monadic forms. (And yes, there's also
                <codeph>mopt</codeph> for optional fields.) But there's a big difference:
                <codeph>mreq</codeph> gives us back a pair of values. Instead of hiding away the
                <apiname id="x-11">yesod-form:Yesod.Form.Types:FieldView</apiname> value and
            automatically inserting it into a widget, we get the control to insert it as we see
            fit.</p>
        <p id="x-12"><codeph>FieldView</codeph> has a number of pieces of information. The most
            important is <codeph>fvInput</codeph>, which is the actual form field. In this example,
            we also use <codeph>fvId</codeph>, which gives us back the HTML <codeph>id</codeph>
            attribute of the input tag. In our example, we use that to specify the width of the
            field.</p>
        <p id="x-13">You might be wondering what the story is with the "this is not used" and
            "neither is this" values. <codeph>mreq</codeph> takes a <codeph>FieldSettings</codeph>
            as its second argument, which allows you to specify an <codeph>id</codeph> or
                <codeph>name</codeph> attribute, as well as give a label and tooltip. The label and
            tooltip are then passed into the <codeph>FieldView</codeph> value. These records are
            used in applicative forms, but don't really serve much of a purpose in monadic forms. By
            giving a dummy string value, you're essentially passing in a default
                <codeph>FieldSettings</codeph> which says "automatically generate the
                <codeph>id</codeph> and <codeph>name</codeph>."</p>
        <p id="x-14">The other interesting bit is the <codeph id="x-15">extra</codeph> value.
                <codeph>GET</codeph> forms include an extra field to indicate that they have been
            submitted, and <codeph>POST</codeph> forms include a security tokens to prevent CSRF
            attacks. If you don't include this extra hidden field in your form, Yesod will not
            accept it.</p>
        <p id="x-16">Other than that, things are pretty straight-forward. We create our
                <codeph>personRes</codeph> value by combining together the <codeph>nameRes</codeph>
            and <codeph>ageRes</codeph> values, and then return a tuple of the person and the
            widget. And in the <codeph>getRootR</codeph> function, everything looks just like an
            applicative form. In fact, you could swap out our monadic form with an applicative one
            and the code would still work.</p>
        <note id="x-17">Well, that's not <b id="x-18">exactly</b> true. It would compile and build,
            but you wouldn't have a submit button.</note>
    </conbody>
</concept>
