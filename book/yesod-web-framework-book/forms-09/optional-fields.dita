<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="optional-fields"><title id="x-1">Optional fields</title><conbody id="x-2">  <p id="x1">Now let's say that we wanted to have an optional field (like the car color). All we do instead
   is use the aopt function.</p>
  <fig id="x2">
   <title id="x3">Optional fields</title>
   <codeblock id="x4" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis where
    approot _ = ""

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: AForm Synopsis Synopsis Car
carAForm = Car
    &lt;$&gt; areq textField "Model" Nothing
    &lt;*&gt; areq intField "Year" Nothing
    &lt;*&gt; aopt textField "Color" Nothing
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable carAForm

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</codeblock>
  </fig>
  <p id="x5">And like required fields, the last argument is the optional default value. However, this has
   two layers of Maybe wrapping. This may seem redundant (and it is), but it makes it much easier to
   write code that takes an optional default form parameter.</p>
  <fig id="x6">
   <title id="x7">Default optional fields</title>
   <codeblock id="x8" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis where
    approot _ = ""

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq intField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt textField "Color" (carColor &lt;$&gt; mcar)

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"
-- STOP

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</codeblock>
  </fig>
 </conbody></concept>