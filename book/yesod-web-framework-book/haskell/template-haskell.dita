<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Template Haskell</title>
 <conbody>
  <p>Template Haskell (TH) is an approach to <i>code generation</i>. We use it in Yesod in a number
   of places to reduce boilerplate, and to ensure that the generated code is correct. Template
   Haskell is essentially Haskell which generates a Haskell Abstract Syntax Tree (AST).</p>
  <note>There's actually more power in TH than that, as it can actually introspect code. We don't
   use these facilities in Yesod, however.</note>
  <p>Writing TH code can be tricky, and unfortunately there isn't very much type safety involved.
   You can easily write TH that will generate code that won't compile. This is only an issue for the
   developers of Yesod, not for its users. During development, we use a large collection of unit
   tests to ensure that the generated code is correct. As a user, all you need to do is call these
   already existing functions. For example, to include an externally defined Hamlet template, you
   can write:</p>
  <codeblock outputclass="haskell">$(hamletFile "myfile.hamlet")</codeblock>
  <p>(Hamlet is discussed in the <xref
    href="../shakespearean-templates/shakespearean-templates.dita#shakespearean-templates"
    format="dita">Shakespeare chapter</xref>.) The dollar sign immediately followed by parantheses
   tell GHC that what follows is a Template Haskell function. The code inside is then run by the
   compiler and generates a Haskell AST, which is then compiled. And yes, it's even possible to
    <xref href="http://www.yesodweb.com/blog/2010/09/yo-dawg-template-haskell" format="html"
    scope="external">go meta with this</xref>.</p>
  <p>A nice trick is that TH code is allowed to perform arbitrary <codeph>IO</codeph> actions, and
   therefore we can place some input in external files and have it parsed at compile time. One
   example usage is to have compile-time checked HTML, CSS, and Javascript templates.</p>
  <p>If your Template Haskell code is being used to generate declarations, and is being placed at
   the top level of our file, we can leave off the dollar sign and parentheses. In other words:</p>
  <codeblock outputclass="haskell">{-# LANGUAGE TemplateHaskell #-}

-- Normal function declaration, nothing special
myFunction = ...

-- Include some TH code
$(myThCode)

-- Or equivalently
myThCode</codeblock>
  <p>It can be useful to see what code is being generated by Template Haskell for you. To do so, you
   should use the <codeph>-ddump-splices</codeph> GHC option.</p>
  <note>There are many other features of Template Haskell not covered here. For more information,
   see the <xref href="http://www.haskell.org/haskellwiki/Template_Haskell" format="html"
    scope="external">Haskell wiki page</xref>.</note>
 </conbody>
</concept>
