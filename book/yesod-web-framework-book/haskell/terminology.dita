<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Terminology</title>
 <conbody id="x-2">
  <p id="x-3">Even for those familiar with Haskell as a language, there can sometimes be some
   confusion about terminology. Let's establish some base terms that we can use throughout this
   book.</p>
  <dl id="x-4">
   <dlentry id="x-5">
    <dt id="x-6">Data type</dt>
    <dd id="x-7">This is one of the core building blocks for a strongly typed language like Haskell. Some
     data types, like <codeph id="x-8">Int</codeph>, can be treated as primitive values, while other data
     types will build on top of these to create more complicated values. For example, you might
     represent a person
     with:<codeblock id="x-9" outputclass="haskell">data Person = Person Text Int</codeblock>Here, the
      <codeph id="x-10">Text</codeph> would give the person's name, and the <codeph id="x-11">Int</codeph> would give
     the person's age. Due to its simplicity, this specific example type will recur throughout the
     book. There are essentially three ways you can create a new data type:<ul id="ul_unf_nuw_ff">
      <li id="x-12">A <codeph id="x-13">type</codeph> declaration such as <codeph id="x-14">type GearCount = Int</codeph> merely
       creates a synonym for an existing type. The type system will do nothing to prevent you from
       using an <codeph id="x-15">Int</codeph> where you asked for a <codeph id="x-16">GearCount</codeph>. Using this
       can make your code more self-documenting.</li>
      <li id="x-17">A <codeph id="x-18">newtype</codeph> declaration such as <codeph id="x-19">newtype Make = Make Text</codeph>.
       In this case, you cannot accidently use a <codeph id="x-20">Text</codeph> in place of a
        <codeph id="x-21">Make</codeph>; the compiler will stop you. The newtype wrapper always disappears
       during compilation, and will introduce no overhead.</li>
      <li id="x-22">A <codeph id="x-23">data</codeph> declaration, such as <codeph id="x-24">Person</codeph> above. You can also
       create Algebraic Data Types (ADTs), such as <codeph id="x-25">data Vehicle = Bicycle GearCount | Car
        Make Model</codeph>.</li>
     </ul></dd>
   </dlentry>
   <dlentry id="x-26">
    <dt id="x-27">Data constructor</dt>
    <dd id="x-28">In our examples above, <codeph id="x-29">Person</codeph>, <codeph id="x-30">Make</codeph>,
      <codeph id="x-31">Bicycle</codeph>, and <codeph id="x-32">Car</codeph> are all data constructors.</dd>
   </dlentry>
   <dlentry id="x-33">
    <dt id="x-34">Type constructor</dt>
    <dd id="x-35">In our examples above, <codeph id="x-36">Person</codeph>, <codeph id="x-37">Make</codeph>, and
      <codeph id="x-38">Vehicle</codeph> are all type constructors.</dd>
   </dlentry>
   <dlentry id="x-39">
    <dt id="x-40">Type variables</dt>
    <dd id="x-41">Consider the data type <codeph id="x-42">data Maybe a = Just a | Nothing</codeph>. In this case,
      <codeph id="x-43">a</codeph> is a type variable.</dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
