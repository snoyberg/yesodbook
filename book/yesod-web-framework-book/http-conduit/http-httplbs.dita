<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>http and httpLbs</title>
 <conbody>
  <p>So let's tie it together. The <codeph>http</codeph> function gives you access to the streaming
   interface (i.e., it returns a <codeph>Response</codeph> using a <codeph>BufferedSource</codeph>)
   while <codeph>httpLbs</codeph> returns a lazy <codeph>ByteString</codeph>. Both of these return
   values in the <codeph>ResourceT</codeph> transformer so that they can access the
    <codeph>Manager</codeph> and have connections handled properly in the case of exceptions.</p>
  <p>Here are a bunch of random comments about the library. Consider it the FAQ. Likewise, if you
   have a question, please ask it so that this section can be updated.</p>
  <dl>
   <dlentry>
    <dt>How do I ignore the remainder of a response body without reading it?</dt>
    <dd>Use <codeph>bsourceClose</codeph> on the <codeph>responseBody</codeph> record.</dd>
   </dlentry>
   <dlentry>
    <dt>I want to share a single <codeph>Manager</codeph> across my entire application. How can I do
     this?</dt>
    <dd>The simplest approach is to simply wrap your <codeph>main</codeph> function with a call to
      <codeph>withManager</codeph> and <codeph>liftIO</codeph>,
     e.g.<codeblock outputclass="haskell">main = withManager $ \manager -> liftIO $ do
   ...</codeblock>Your
     manager will exist through the entire lifetech of your application, and individual calls to
      <codeph>http</codeph> and <codeph>httpLbs</codeph> will live in separate
      <codeph>ResourceT</codeph>s than the main function's. This ensures that those individual
     blocks will still have timely deallocation of resources.</dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
