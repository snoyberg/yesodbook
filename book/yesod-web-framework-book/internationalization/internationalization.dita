<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="internationalization"><title id="x-1">Internationalization (incomplete)</title><conbody id="x-2">
        <p id="x-3">Users expect our software to speak their language. Unfortunately for us, there
            will likely be more than one language involved. While doing simple string replacement
            isn't too involved, correctly dealing with all the grammar issues can be tricky. After
            all, who wants to see "List 1 file(s)" from a program output?</p>
        <p>But a real i18n solution needs to do more than just provide a means of achieving the
            correct output. It needs to make this process easy for both the programmer and the
            translator and relatively error-proof. Yesod's answer to the problem gives you:</p>
        <ul id="ul_bqf_mdz_ae">
            <li>Intelligent guessing of the user's desired language based on request headers, with
                the ability to override.</li>
            <li>A simple syntax for giving translations which requires no Haskell knowledge. (After
                all, most translators aren't programmers.)</li>
            <li>The ability to bring in the full power of Haskell for tricky grammar issues as
                necessary, along with a default selection of helper functions to cover most
                needs.</li>
            <li>Absolutely no issues at all with word order.</li>
        </ul>
    </conbody></concept>