<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="overview">
 <title id="x-1">Overview</title>
 <conbody id="x-2">
  <p id="x-3">Most existing i18n solutions out there, like gettext or Java message bundles, work on the
   principle of string lookups. Usually some form of printf-interpolation is used to interpolate
   variables into the strings. In Yesod, as you might guess, we instead rely on types. This gives us
   all of our normal advantages, such as the compiler automatically catching mistakes.</p>
  <p id="x-4">Let's take a concrete example. Suppose our application has two things it wants to say to a
   user: say hello, and state how many users are logged into the system. This can be modeled with a
   simple datatype:</p>
  <codeblock id="x-5" outputclass="haskell">data MyMessage = MsgHello | MsgUsersLoggedIn Int</codeblock>
  <p id="x-6">I can also write a simple function to turn this datatype into an English representation:</p>
  <codeblock id="x-7" outputclass="haskell">toEnglish :: MyMessage -&gt; String
toEnglish MsgHello = "Hello there!"
toEnglish (MsgUsersLoggedIn 1) = "There is 1 user logged in."
toEnglish (MsgUsersLoggedIn i) = "There are " ++ show i ++ " users logged in."</codeblock>
  <p id="x-8">We can also write similar functions for other languages. The advantage to this inside-Haskell
   approach is that we have the fully power of Haskell for addressing tricky grammar issues,
   especially pluralization.</p>
  <note id="x-9">You may think pluralization isn't so complicated: you have one version for 1 item, and
   another for any other count. That might be true in English, but it's not true for every language.
   Russian, for example, has six different forms, and you need to use some modulus logic to
   determine which one to use.</note>
  <p id="x-10">The downside, however, is that you have to write all of this inside of Haskell, which won't be
   very translator friendly. To solve this, Yesod introduces the concept of message files. We'll
   cover that in a little bit.</p>
  <p id="x-11">So let's say we have this full set of translation functions. How do we go about using them?
   What we need is a new function to wrap them all up together, and then choose the appropriate
   translation function based on the user's selected language. Once we have that, Yesod can
   automatically choose the most relevant render function and call it on the values you provide.</p>
  <p id="x-12">In order to simplify things a bit, Hamlet has a special interpolation syntax,
    <codeph id="x-13">_{...}</codeph>, which handles all the calls to the render functions. And in order to
   associate a render function with your application, you use the <codeph id="x-14">YesodMessage</codeph>
   typeclass.</p>
 </conbody>
</concept>
