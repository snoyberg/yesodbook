<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_srz_1mc_22">
 <title id="x-1">RenderMessage typeclass</title>
 <conbody id="x-2">
  <p id="x-3">Your call to <codeph id="x-4">mkMessage</codeph> creates an instance of the
    <codeph>RenderMessage</codeph> typeclass, which is the core of Yesod's i18n. It is defined
   as:</p>
  <codeblock id="x-5" outputclass="haskell">class RenderMessage master message where
    renderMessage :: master
                  -&gt; [Text] -- ^ languages
                  -&gt; message
                  -&gt; Text </codeblock>
  <p id="x-6">Notice that there are two parameters to the <codeph>RenderMessage</codeph> class: the
   master site and the message type. In theory, we could skip the master type here, but that would
   mean that every site would need to have the same set of translations for each message type. When
   it comes to shared libraries like forms, that would not be a workable solution.</p>
  <p id="x-7">The <codeph>renderMessage</codeph> function takes a parameter for each of the class's
   type parameters: master and message. The extra parameter is a list of languages the user will
   accept, in descending order of priority. The method then returns a user-ready
    <codeph>Text</codeph> that can be displayed.</p>
  <p id="x-8">A simple instance of <codeph>RenderMessage</codeph> may involve no actual translation
   of strings; instead, it will just display the same value for every language. For example:</p>
  <codeblock id="x-9" outputclass="haskell">data MyMessage = Hello | Greet Text
instance RenderMessage MyApp MyMessage where
    renderMessage _ _ Hello = "Hello"
    renderMessage _ _ (Greet name) = "Welcome, " &lt;&gt; name &lt;&gt; "!"</codeblock>
  <p id="x-10">Notice how we ignore the first two parameters to <codeph>renderMessage</codeph>. We
   can now extend this to support multiple languages:</p>
  <codeblock id="x-11" outputclass="haskell">renderEn Hello = "Hello"
renderEn (Greet name) = "Welcome, " &lt;&gt; name &lt;&gt; "!"
renderHe Hello = "שלום"
renderHe (Greet name) = "ברוכים הבאים, " &lt;&gt; name &lt;&gt; "!"
instance RenderMessage MyApp MyMessage where
    renderMessage _ ("en":_) = renderEn
    renderMessage _ ("he":_) = renderHe
    renderMessage master (_:langs) = renderMessage master langs
    renderMessage _ [] = renderEn</codeblock>
  <p id="x-12">The idea here is fairly straight-forward: we define helper functions to support each language.
   We then add a clause to catch each of those languages in the renderMessage definition. We then
   have two final cases: if no languages matched, continue checking with the next language in the
   user's priority list. If we've exhausted all languages the user specified, then use the default
   language (in our case, English).</p>
  <p id="x-13">But odds are that you will never need to worry about writing this stuff manually, as the
   message file interface does all this for you. But it's always a good idea to have an
   understanding of what's going on under the surface.</p>
 </conbody>
</concept>
