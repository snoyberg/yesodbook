<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="intuition"><title id="x-1">Intuition</title><conbody id="x-2">
  <p id="x1">Let's try and develop an external intuition of what's happening here. The ErrorT monad
   transformer adds extra functionality to the IO monad. We've defined a way to "tack on" that extra
   functionality to normal IO actions: we add that Right constructor and wrap it all in ErrorT.
   Wrapping in Right is our way of saying "it went OK," there wasn't anything wrong with this
   action.</p>
  <p id="x2">Now this intuitively makes sense: since the IO monad doesn't have the concept of returning a
   MyError when something goes wrong, it will always succeed in the lifting phase. (Note: This has
    <b id="x3">nothing</b> to do with runtime exceptions, don't even think about them.) What we have is a
   guaranteed one-directional translation up the monad stack.</p>
  <p id="x4">Let's take another example: the Reader monad. A Reader has access to some extra piece of data
   floating around. Whatever is running in the inner monad doesn't know about that extra piece of
   information. So how would you do a lift? You just ignore that extra information. The Writer
   monad? Don't write anything. State? Don't change anything. I'm seeing a pattern here.</p>
  <p id="x5">But now let's try and go in the opposite direction: I have something in a Reader, and I'd like
   to run it in the base monad (e.g., IO). Well... that's not going to work, is it? I need that
   extra piece of information, I'm relying on it, and it's not there. There's simply no way to go in
   the opposite direction without providing that extra value.</p>
  <p id="x6">Or is there? If you remember, we'd pointed out earlier that ErrorT is just a simple wrapper
   around the inner monad. In other words, if I have <codeph id="x7">errorValue :: ErrorT MyError IO
    MyValue</codeph>, I can apply <codeph id="x8">runErrorT</codeph> and get a value of type <codeph id="x9">IO
    (Either MyError MyValue)</codeph>. The looks quite a bit like bi-directional translation,
   doesn't it?</p>
  <p id="x10">Well, not quite. We originally had an <codeph id="x11">ErrorT MyError IO</codeph> monad, with a value of
   type <codeph id="x12">MyValue</codeph>. Now we have a monad of type <codeph id="x13">IO</codeph> with a value of
   type <codeph id="x14">Either MyError MyValue</codeph>. So this process has in fact changed the value,
   while the lifting process leaves it the same.</p>
  <p id="x15">But still, with a little fancy footwork we can unwrap the ErrorT, do some processing, and then
   wrap it back up again.</p>
  <codeblock id="x16" outputclass="haskell">useMyFileError1 :: ErrorT MyError IO ()
useMyFileError1 =
    let unwrapped :: Handle -&gt; IO (Either MyError ())
        unwrapped handle = runErrorT $ sayHiError handle
        applied :: IO (Either MyError ())
        applied = withMyFile unwrapped
        rewrapped :: ErrorT MyError IO ()
        rewrapped = ErrorT applied
     in rewrapped</codeblock>
  <p id="x17">This is the crucial point of this whole article, so look closely. We first unwrap our monad.
   This means that, to the outside world, it's now just a plain old IO value. Internally, we've
   stored all the information from our ErrorT transformer. Now that we have a plain old IO, we can
   easily pass it off to withMyFile. withMyFile takes in the internal state and passes it back out
   unchanged. Finally, we wrap everything back up into our original ErrorT.</p>
  <p id="x18">This is the entire pattern of monad-control: we embed the extra features of our monad
   transformer inside the value. Once in the value, the type system ignores it and focuses on the
   inner monad. When we're done playing around with that inner monad, we can pull our state back out
   and reconstruct our original monad stack.</p>
 </conbody></concept>