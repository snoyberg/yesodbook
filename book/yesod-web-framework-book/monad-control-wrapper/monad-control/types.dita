<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="types"><title id="x-1">Types</title><conbody id="x-2">
  <p id="x1">I purposely started with the ErrorT transformer, as it is one of the simplest for this
   inversion mechanism. Unfortunately, others are a bit more complicated. Take for instance ReaderT.
   It is defined as <codeph id="x2">newtype ReaderT r m a = ReaderT { runReaderT :: r -&gt; m a }</codeph>. If
   we apply <codeph id="x3">runReaderT</codeph> to it, we get a function that returns a monadic value. So
   we're going to need some extra machinery to deal with all that stuff. And this is when we leave
   Kansas behind.</p>
  <p id="x4">There are a few approaches to solving these problems. In the past, I implemented a solution
   using type families in the <apiname id="x5">neither</apiname> package. Anders Kaseorg implemented a much
   more straight-forward solution in <apiname id="x6">monad-peel</apiname>. And for efficiency, in
    <apiname id="x7">monad-control</apiname>, Bas van Dijk uses CPS (continuation passing style) and
   existential types.</p>
  <note>The code taken from monad-control actually applies to version 0.2. 0.3 changed things just a
   bit, by making the state explicit with an associated type, and generalizing
    <codeph>MonadControlIO</codeph> to <codeph>MonadBaseControl</codeph>, but the concepts are still
   the same.</note>
  <p id="x8">The first type we're going to look at
   is:<codeblock id="x9" outputclass="haskell">type Run t = forall n o b. (Monad n, Monad o, Monad (t o)) =&gt; t n b -&gt; n (t o b)</codeblock>That's
   incredibly dense, let's talk it out. The only "input" datatype to this thing is t, a monad
   transformer. A Run is a function that will then work with <b id="x10">any</b> combination of types n, o
   and b (that's what the forall means). n and o are both monads, while b is a simple value
   contained by them.</p>
  <p id="x11">The left hand side of the Run function, <codeph id="x12">t n b</codeph>, is our monad transformer
   wrapped around the n monad and holding a b value. So for example, that could be a <codeph id="x13">MyTrans
    FirstMonad MyValue</codeph>. It then returns a value with the transformer "popped" inside, with
   a brand new monad at its core. In other words, <codeph id="x14">FirstMonad (MyTrans NewMonad
    MyValue)</codeph>.</p>
  <p id="x15">That might sound pretty scary at first, but it actually isn't as foreign as you'd think: this
   is essentially what we did with ErrorT. We started with ErrorT on the outside, wrapping around
   IO, and ended up with an IO by itself containing an Either. Well guess what: another way to
   represent an Either is <codeph id="x16">ErrorT MyError Identity</codeph>. So essentially, we pulled the IO
   to the outside and plunked an Identity in its place. We're doing the same thing in a Run: pulling
   the FirstMonad outside and replacing it with a NewMonad.<note id="x17">Now might be a good time to get a
    beer.</note></p>
  <p id="x18">Alright, now we're getting somewhere. If we had access to one of those Run functions, we could
   use it to peel off the ErrorT on our sayHiError function and pass it to withMyFile. With the
   magic of undefined, we can play such a game:</p>
  <codeblock id="x19" outputclass="haskell">errorRun :: Run (ErrorT MyError)
errorRun = undefined

useMyFileError2 :: IO (ErrorT MyError Identity ())
useMyFileError2 =
    let afterRun :: Handle -&gt; IO (ErrorT MyError Identity ())
        afterRun handle = errorRun $ sayHiError handle
        applied :: IO (ErrorT MyError Identity ())
        applied = withMyFile afterRun
     in applied</codeblock>
  <p id="x20">This looks eerily similar to our previous example. In fact, errorRun is acting almost
   identically to runErrorT. However, we're still left with two problems: we don't know where to get
   that errorRun value from, and we still need to restructure the original ErrorT after we're
   done.</p>
 </conbody></concept>