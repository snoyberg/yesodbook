<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="fetching-by-unique-constraint"><title id="x-1">Fetching by unique constraint</title><conbody id="x-2">
  <p id="x1"><codeph>getBy</codeph> is almost identical to <codeph>get</codeph>, except it takes a
            uniqueness constraint instead of an ID it takes a Unique value.</p>
  <fig id="x2">
   <title id="x3">Using getBy</title>
   <codeblock id="x4" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    firstName String
    lastName String
    age Int Gt Desc
    UniqueName firstName lastName
|]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
-- START
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    maybePerson &lt;- getBy $ UniqueName "Michael" "Snoyman"
    case maybePerson of
        Nothing -&gt; liftIO $ putStrLn "Just kidding, not really there"
        Just person -&gt; liftIO $ print person
-- STOP</codeblock>
  </fig>
        <p>Like <codeph>get404</codeph>, there is also a <codeph>getBy404</codeph> function.</p>
 </conbody></concept>