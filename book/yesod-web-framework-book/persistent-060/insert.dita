<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="insert"><title id="x-1">Insert</title><conbody id="x-2">  <p id="x1">It's all well and good to be able to play with data in the database, but how does it
   get there in the first place? The answer is the <codeph id="x-3">insert</codeph> function. You just give
   it a value, and it gives back an ID.</p>
  <p id="x2">At this point, it makes sense to explain a bit of the philosophy behind Persistent. In
   many other ORM solutions, the datatypes used to hold data are opaque: you need to go through
   their defined interfaces to get at and modify the data. That's not the case with Persistent:
   we're using plain old Algebraic Data Types for the whole thing. This means you still get all the
   great benefits of pattern matching, currying and everything else you're used to.</p>
  <p id="x3">However, there are a few things we <i id="x4">can't</i> do. For one, there's no way to automatically
   update values in the database every time the record is updated in Haskell. Of course, with
   Haskell's normal stance of purity and immutability, this wouldn't make much sense anyway, so I
   don't shed any tears over it.</p>
  <p id="x5">However, there is one issue that newcomers are often bothered by: why are IDs and values
   completely separate? It seems like it would be very logical to embed the ID inside the value. In
   other words, instead of
   having:<codeblock outputclass="haskell" id="x6">data Person = Person { name :: String }</codeblock>have<codeblock outputclass="haskell" id="x7">data Person = Person { personId :: PersonId, name :: String }</codeblock></p>
  <p id="x8">Well, there's one problem with this right off the bat: how do we do an
    <codeph id="x-4">insert</codeph>? If a Person needs to have an ID, and we get the ID by inserting, and an
   insert needs a Person, we have an impossible loop. We could solve this with
    <codeph id="x-5">undefined</codeph>, but that's just asking for trouble.</p>
  <p id="x9">OK, you say, let's try something a bit
   safer:<codeblock outputclass="haskell" id="x10">data Person = Person { personId :: Maybe PersonId, name :: String }</codeblock>I
   definitely prefer <codeph id="x11">insert $ Person Nothing "Michael"</codeph> to <codeph id="x12">insert $ Person undefined "Michael"</codeph>. And now our types will be much simpler, right?
   For example, <codeph id="x-6">selectList</codeph> could return a simple <codeph id="x13">[Person]</codeph>
   instead of that ugly <codeph id="x14">[Entity SqlPersist Person]</codeph>.</p>
  <note id="x-7"><codeph id="x-8">Entity</codeph> is a datatype that ties together both the ID and value of an entity.
   Since IDs can be different based on backend, we also need to provide the Persistent backend we're
   using. The datatype <codeph id="x-9">Entity SqlPersist Person</codeph> can be read as "the ID and value of
   a person stored in a SQL database."</note>
  <p id="x15">The problem is that the "ugliness" is incredibly useful. Having <codeph id="x16">Entity SqlPersist Person</codeph> makes it obvious, at the type level, that we're dealing with
   a value that exists in the database. Let's say we want to create a link to another page that
   requires the <codeph id="x17">PersonId</codeph> (not an uncommon occurrence as we'll discuss
   later). The <codeph id="x-10">Entity SqlPersist Person</codeph> form gives us unambiguous access to that
   information; embedding <codeph id="x-11">PersonId</codeph> within <codeph id="x-12">Person</codeph> with a
    <codeph id="x-13">Maybe</codeph> wrapper means an extra runtime check for <codeph id="x-14">Just</codeph>, instead
   of a more error-proof compile time check.</p>
  <p id="x18">Finally, there's a semantic mismatch with embedding the ID within the value. The
    <codeph id="x-15">Person</codeph> is the value. Two people are identical (in the context of a database) if
   all their fields are the same. By embedding the ID in the value, we're no longer talking about a
   person, but about a row in the database. Equality is no longer really equality, it's identity: is
   this the <i id="x19">same person</i>. as opposed to an equivalent person.</p>
  <p id="x20">In other words, there are some annoyances with having the ID separated out, but overall, it's
   the <i id="x21">right</i> approach, which in the grand scheme of things leads to better, less buggy
   code.</p>
 </conbody></concept>