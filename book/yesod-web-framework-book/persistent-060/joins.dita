<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="joins">
 <title id="x-1">Joins</title>
 <conbody id="x-2">
  <p id="x-3">As we said in the introduction to this chapter, Persistent is non-relational: it works
   perfectly well with either SQL or non-SQL, and there is nothing inherent in its design which
   requires relations. On the other hand, <xref id="x-4" href="relations.dita#relations" format="dita">this
    very chapter gave advice on modeling relations</xref>. What gives?</p>
  <p id="x-5">Both statements are true: you're not tied to relations, but they're available if you want to
   use them. And when the time comes, Persistent provides you with the tools to easily create
   efficient relational queries, or in SQL terms: table joins.</p>
  <p id="x-6">To play along with our existing no-SQL slant, the basic approach to doing joins in Persistent
   does not actually use any joins in SQL. This means that a Persistent join will work perfectly
   well with MongoDB, even though Mongo doesn't natively support joins. However, when dealing with a
   SQL database, most of the time you'll want to use the database's join abilities. And for this,
   Persistent provides an alternate module that works just that way. (Obviously, that module is
   incompatible with Mongo.)</p>
  <p id="x-7">The best part? These two modules have an identical API. All you have to do is swap out which
   runJoin function you import, and the behavior changes as well.</p>
  <p id="x-8">So how does this joining work? Let's look at a one-to-many relationship, such as a car/owner
   example above. Every car has an owner, and every owner has zero or more cars. The
   Database.Persist.Query.Join module provides a datatype, SelectOneMany, that contains a bunch of join
   settings, such as how to sort the owners (somOrderOne) and how to filter the cars
   (somFitlterMany).</p>
  <p id="x-9">In addition, there is a selectOneMany function, which will fill in defaults for all the
   settings except two. This function needs to be told how to filter the cars based on an owner, and
   how to determine the owner from a car value.</p>
  <note id="x-10">You might be thinking this is something that Persistent could automate away for us. Well, in
   theory yes, but there are two complications to be taken into account: there might be multiple
   relations between entities (e.g., a car could have both an owner and a mechanic), or that might
   not be any relations. In my opinion, the simplest, most consistent API results from just making
   these things explicit parameters.</note>
  <p id="x-11">When you run a SelectOneMany, it will return something with a bit of a crazy type signature:
    <codeph id="x-12">[((PersonId, Person), [(CarId, Car)])]</codeph>. This might look intimidating, but lets
   simplify it just a bit:</p>
  <codeblock id="x-13" outputclass="haskell">type PersonPair = (PersonId, Person)
type CarPair = (CarId, Car)
type Result = [(PersonPair, [CarPair])]</codeblock>
  <p id="x-14">In other words, all this means is a grouped list of people to their cars.</p>
  <p id="x-15">What happens if a person doesn't have a car? By default, they won't show up in the output,
   though you can override this with the somIncludeNoMatch record. The default behavior matches the
   behavior of a SQL inner join. Overriding this matches the behavior of a SQL left join.</p>
  <p id="x-16">One other note: while the somOrderOne field is optional, you'll almost always want to provide
   it. Without it, there is no guarantee that the cars will be grouped appropriately. You might end
   up with multiple records for a single person.</p>
  <codeblock id="x-17" outputclass="haskell">{-# LANGUAGE TypeFamilies, TemplateHaskell, MultiParamTypeClasses,
             GADTs, QuasiQuotes, OverloadedStrings, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Database.Persist.Query.Join (SelectOneMany (..), selectOneMany)
import Control.Monad.IO.Class (liftIO)

-- We'll use the SQL-enhanced joins. If you want the in-application join
-- behavior instead, just import runJoin from Database.Persist.Query.Join
import Database.Persist.Query.Join.Sql (runJoin)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    name String
Car
    owner PersonId
    name String
|]

main :: IO ()
main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigration migrateAll

    bruce &lt;- insert $ Person "Bruce Wayne"
    insert $ Car bruce "Bat Mobile"
    insert $ Car bruce "Porsche"
    -- this could go on a while

    peter &lt;- insert $ Person "Peter Parker"
    -- poor Spidey, no car

    logan &lt;- insert $ Person "James Logan" -- Wolverine
    insert $ Car logan "Harley"

    britt &lt;- insert $ Person "Britt Reid" -- The Green Hornet
    insert $ Car britt "The Black Beauty"

    results &lt;- runJoin (selectOneMany (CarOwner &lt;-.) carOwner)
        { somOrderOne = [Asc PersonName]
        }

    liftIO $ printResults results

printResults :: [(Entity Person, [Entity Car])] -&gt; IO ()
printResults =
    mapM_ goPerson
  where
    goPerson :: (Entity Person, [Entity Car]) -&gt; IO ()
    goPerson ((Entity _personid person), cars) = do
        putStrLn $ personName person
        mapM_ goCar cars
        putStrLn ""

    goCar :: (Entity Car) -&gt; IO ()
    goCar (Entity _carid car) = putStrLn $ "    " ++ carName car</codeblock>
 </conbody>
</concept>
