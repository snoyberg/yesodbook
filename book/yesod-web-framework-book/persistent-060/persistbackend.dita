<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="persistbackend"><title id="x-1">PersistBackend</title><conbody id="x-2"><p id="bc1">One last detail is left unexplained from the previous example: what are those withSqliteConn and runSqlConn functions doing, and what is that monad that our database actions are running in?</p><p id="bc2">All database actions need to occur within an instance of
            <codeph id="x1">PersistBackend</codeph>. As its name implies, every backend (PostgreSQL, SQLite,
            MongoDB) has an instance of PersistBackend. This is where all the translations from
                <codeph id="x2">PersistValue</codeph> to database-specific values occur, where SQL query
            generation happens, and so on.</p><note id="x3" type="other" othertype="advanced"><p id="bc3">As you can imagine, even though PersistBackend provides a safe, well-typed interface to
                the outside world, there are a lot of database interactions that could go wrong.
                However, by testing this code automatically and thoroughly in a single location, we
                can centralize our error-prone code and make sure it is as bug-free as possible.</p></note><p id="bc4">withSqliteConn creates a single connection to a database using its supplied connection string. For our test cases, we will use ":memory:", which simply uses an in-memory database. runSqlConn uses that connection to run the inner action, in this case, SqlPersist. Both SQLite and PostgreSQL share the same instance of PersistBackend.</p><p id="bc5">One important thing to note is that everything which occurs inside a single call to runSqlConn runs in a single transaction. This has two important implications:</p><ul id="x4"><li id="x5">For many databases, committing a transaction can be a costly activity. By putting multiple steps into a single transaction, you can speed up code dramatically.</li><li id="x6">If an exception is thrown anywhere inside a single call to runSqlConn, all actions will be rolled back.</li></ul></conbody></concept>