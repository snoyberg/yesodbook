<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="persistent-raw-sql"><title id="x-1">Persistent: Raw SQL</title><conbody id="x-2">  <p id="x1">The Persistent package provides a type safe interface to data stores. It tries to be
            backend-agnostic, such as not relying on relational features of SQL. My experience has
            been you can easily perform 95% of what you need to do with the high-level interface.
            (In fact, most of my web apps use the high level interface exclusively.)</p>
  <p id="x2">But occassionally you'll want to use a feature that's specific to a backend. One feature I've
   used in the past is full text search. In this case, we'll use the SQL "LIKE" operator, which is
   not modeled in Persistent. We'll get all people with the last name "Snoyman" and print the
   records out.</p>
        <note id="x4">Actually, you <i id="x5">can</i> express a LIKE operator directly in the
            normal syntax due to a feature added in Persistent 0.6, which allows backend-specific
            operators. But this is still a good example, so let's roll with it.</note>
  <codeblock id="x3" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TemplateHaskell, QuasiQuotes, TypeFamilies #-}
{-# LANGUAGE GeneralizedNewtypeDeriving, GADTs, FlexibleContexts #-}
import Database.Persist.Sqlite (withSqliteConn)
import Database.Persist.TH (mkPersist, persist, share, mkMigrate, sqlSettings)
import Database.Persist.GenericSql (runSqlConn, runMigration, SqlPersist)
import Database.Persist.GenericSql.Raw (withStmt)
import Data.Text (Text)
import Database.Persist
import Database.Persist.Store (PersistValue)
import Control.Monad.IO.Class (liftIO)
import qualified Data.Conduit as C
import qualified Data.Conduit.List as CL

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    name Text
|]

main :: IO ()
main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigration migrateAll
    insert $ Person "Michael Snoyman"
    insert $ Person "Miriam Snoyman"
    insert $ Person "Eliezer Snoyman"
    insert $ Person "Gavriella Snoyman"
    insert $ Person "Greg Weber"
    insert $ Person "Rick Richardson"

    -- Persistent does not provide the LIKE keyword, but we'd like to get the
    -- whole Snoyman family...
    let sql = "SELECT name FROM Person WHERE name LIKE '%Snoyman'"
    C.runResourceT $ withStmt sql []
                C.$$ CL.mapM_ $ liftIO . print</codeblock>
        <p id="x-3">There is also higher-level support that allows for automated data marshaling. Please see
            the Haddock API docs for more details.</p>
 </conbody></concept>
