<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="persistent"><title id="x-1">Persistent</title><conbody id="x-2"><p id="i1">Forms deal with the boundary between the user and the application. Another boundary we
            need to deal with is between the application and the storage layer. Whether it be a SQL
            database, a YAML file, or a binary blob, odds are you have to work to get your storage
            layer to accept your application datatypes. Persistent is Yesod's answer to data
            storage- a type-safe, universal data store interface for Haskell. </p><p id="i1.5">Haskell has many different database bindings available. However, most of these have
            little knowledge of a schema and therefore do not provide useful static guarantees. They
            also force database-dependent APIs and data types on the programmer. Haskellers have
            attempted a more revolutionary route of creating Haskell specific data stores to get
            around these flaws that allow one to easily store any Haskell type. These options are
            great for certain use cases, but they constrain one to the storage techniques provided
            by the library, do not interface well with other languages, and the flexibility can also
            mean one must write reams of code for querying data. In contrast, Persistent allows us
            to choose among existing databases that are highly tuned for different data storage use
            cases, interoperate with other programming languages, and to use a safe and productive
            query interface. </p><p id="i2">Persistent follows the guiding principles of type safety and concise, declarative syntax. Some other nice features are:</p><ul id="x1"><li id="x2">Database-agnostic. There is first class support for PostgreSQL, SQLite and MongoDB, with
                experimental CouchDB and MySQL support in the works.</li><li id="x3">By being non-relational in nature, we simultaneously are able to support a wider number of storage layers and are not constrained by some of the performance bottlenecks incurred through joins.</li><li id="x4">A major source of frustration in dealing with SQL databases is changes to the schema. Persistent can automatically perform database migrations.</li></ul>
    <!-- still want to cover:
        
        Advanced: select enumerator interface (maybe)
        Join modules
    -->

</conbody></concept>