<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="relations"><title id="x-1">Relations</title><conbody id="x-2"><p id="r1">Persistent allows references between your data types in a manner that is consistent with
            supporting non-SQL databases. We do this by embedding an ID in the related entity. So if
            a person has many cars:</p><codeblock id="x1" outputclass="haskell">-- START
{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Control.Monad.IO.Class (liftIO)
import Data.Time

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    name String
    deriving Show
Car
    ownerId PersonId Eq
    name String
    deriving Show
|]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigration migrateAll
    bruce &lt;- insert $ Person "Bruce Wayne"
    insert $ Car bruce "Bat Mobile"
    insert $ Car bruce "Porsche"
    -- this could go on a while
    cars &lt;- selectList [CarOwnerId ==. bruce] []
    liftIO $ print cars
-- STOP
</codeblock><p id="r4">Using this technique, you can define one-to-many relationships. To define many-to-many
            relationships, we need a join entity, which has a one-to-many relationship with each of
            the original tables. It is also a good idea to use uniqueness constraints on these. For
            example, to model a situation where we want to track which people have shopped in which
            stores:</p><codeblock id="x2" outputclass="haskell">-- START
{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    name String
Store
    name String
PersonStore
    personId PersonId
    storeId StoreId
    UniquePersonStore personId storeId
|]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigration migrateAll

    bruce &lt;- insert $ Person "Bruce Wayne"
    michael &lt;- insert $ Person "Michael"

    target &lt;- insert $ Store "Target"
    gucci &lt;- insert $ Store "Gucci"
    sevenEleven &lt;- insert $ Store "7-11"

    insert $ PersonStore bruce gucci
    insert $ PersonStore bruce sevenEleven

    insert $ PersonStore michael target
    insert $ PersonStore michael sevenEleven
-- STOP</codeblock></conbody></concept>
