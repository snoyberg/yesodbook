<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="selectopt"><title id="x-1">SelectOpt</title><conbody id="x-2">
  <p id="x1">All of our <codeph id="x-3">selectList</codeph> calls have included an empty list as the second
   parameter. That specifies no options, meaning: sort however the database wants, return all
   results, and don't skip any results. A <codeph id="x-4">SelectOpt</codeph> has four constructors that can
   be used to change all that.</p>
  <dl id="x2">
   <dlentry id="x3">
    <dt id="x4">Asc</dt>
    <dd id="x5">Sort by the given column in ascending order. This uses the same phantom type as
     filtering, such as <codeph id="x-5">PersonAge</codeph>.</dd>
   </dlentry>
   <dlentry id="x6">
    <dt id="x7">Desc</dt>
    <dd id="x8">Same as <codeph id="x-6">Asc</codeph>, in descending order.</dd>
   </dlentry>
   <dlentry id="x9">
    <dt id="x10">LimitTo</dt>
    <dd id="x11">Takes an <codeph id="x-7">Int</codeph> argument. Only return up to the specified number of
     results.</dd>
   </dlentry>
   <dlentry id="x12">
    <dt id="x13">OffsetBy</dt>
    <dd id="x14">Takes an <codeph id="x-8">Int</codeph> argument. Skip the specified number of results.</dd>
   </dlentry>
  </dl>
  <p id="x15">The following code defines a function that will break down results into pages. It returns all
   people aged 18 and over, and then sorts them by age (oldest person first). For people with the
   same age, they are sorted alphabetically by last name, then first name.</p>
  <codeblock id="x16" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    firstName String
    lastName String
    age Int Gt Desc
    UniqueName firstName lastName
    deriving Show
|]

-- START
resultsForPage pageNumber = do
    let resultsPerPage = 10
    selectList
        [ PersonAge &gt;=. 18
        ]
        [ Desc PersonAge
        , Asc PersonLastName
        , Asc PersonFirstName
        , LimitTo resultsPerPage
        , OffsetBy $ (pageNumber - 1) * resultsPerPage
        ]
-- STOP

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    resultsForPage 1 &gt;&gt;= liftIO . print</codeblock>
 </conbody></concept>
