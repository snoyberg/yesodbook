<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="types"><title id="x-1">Types</title><conbody id="x-2"><p id="ba1">Like routing, there is nothing intrinsically difficult about type-safe data access. It
            just requires a lot of monotonous, error prone, boiler plate code. As usual, this means
            we can use the type system to keep us honest. And to avoid some of the drudgery, we'll
            use a sprinkling of Template Haskell.</p>
<note id="x1">Earlier versions of Persistent made much heavier usage of Template Haskell. Starting
            with 0.6, there is a new architecture inspired by the <apiname id="x2">groundhog</apiname>
            package. This approach uses phantom types to carry a lot of the burden.</note>
<p id="ba2"><codeph id="x3">PersistValue</codeph> is the basic building block of Persistent. It is a
            sum type that can represent data that gets sent to and from a database. Its definition
            is:</p><codeblock id="x4" outputclass="haskell">data PersistValue = PersistText Text
                  | PersistByteString ByteString
                  | PersistInt64 Int64
                  | PersistDouble Double
                  | PersistBool Bool
                  | PersistDay Day
                  | PersistTimeOfDay TimeOfDay
                  | PersistUTCTime UTCTime
                  | PersistNull
                  | PersistList [PersistValue]
                  | PersistMap [(T.Text, PersistValue)]
                  | PersistForeignKey ByteString -- ^ intended especially for MongoDB backend</codeblock><p id="ba4">Each Persistent backend needs to know how to translate the relevant values into
            something the database can understand. However, it would be awkward do have to express
            all of our data simply in terms of these basic types. The next layer is the <codeph id="x5">PersistField</codeph> typeclass, which defines how an arbitrary Haskell
            datatype can be marshaled to and from a <codeph id="x6">PersistValue</codeph>. A
                <codeph id="x-3">PersistField</codeph> correlates to a column in a SQL database. In our
            person example above, name and age would be our <codeph id="x7">PersistField</codeph>s.</p><p id="ba5">To tie up the user side of the code, our last typeclass is <codeph id="x8">PersistEntity</codeph>. An instance of PersistEntity correlates with a table in a
            SQL database. This typeclass defines a number of functions and some associated types. To
            review, we have the following correspondence between Persistent and SQL:</p>
        <simpletable id="simpletable_hmz_kck_kd">
            <sthead id="x9">
                <stentry id="x10">SQL</stentry>
                <stentry id="x11">Persistent</stentry>
            </sthead>
            <strow id="x12">
                <stentry id="x13">Datatypes (VARCHAR, INTEGER, etc)</stentry>
                <stentry id="x14">PersistValue</stentry>
            </strow>
            <strow id="x18">
                <stentry id="x19">Column</stentry>
                <stentry id="x20">PersistField</stentry>
            </strow>
            <strow id="x15">
                <stentry id="x16">Table</stentry>
                <stentry id="x17">PersistEntity</stentry>
            </strow>
        </simpletable></conbody></concept>
