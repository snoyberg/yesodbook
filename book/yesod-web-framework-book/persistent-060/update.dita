<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="update"><title id="x-1">Update</title><conbody id="x-2">  <p id="x1">Now, in the context of that discussion, let's think about updating. The simplest way to
            update
            is:<codeblock id="x2" outputclass="haskell">let michael = Person "Michael" 26
    michaelAfterBirthday = michael { personAge = 27 }</codeblock>But
            that's not actually updating anything, it's just creating a new <codeph id="x-3">Person</codeph>
            value based on the old one. When we say update, we're <i id="x3">not</i> talking about
            modifications to the values in Haskell. (We better not be of course, since Haskell data
            types are immutable.)</p>
  <p id="x4">Instead, we're looking at ways of modifying rows in a table. And the simplest way to do
            that is with the <codeph id="x-4">update</codeph> function.</p>
  <codeblock id="x5" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person sql=the-person-table
    firstName String sql=first_name
    lastName String sql=fldLastName
    age Int Gt Desc "sql=The Age of the Person"
    UniqueName firstName lastName
|]

resultsForPage pageNumber = do
    let resultsPerPage = 10
    selectList
        [ PersonAge &gt;=. 18
        ]
        [ Desc PersonAge
        , Asc PersonLastName
        , Asc PersonFirstName
        , LimitTo resultsPerPage
        , OffsetBy $ (pageNumber - 1) * resultsPerPage
        ]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
-- START
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    update personId [PersonAge =. 27]
-- STOP
    resultsForPage 1 &gt;&gt;= liftIO . print</codeblock>
  <p id="x6"><codeph id="x-5">update</codeph> takes two arguments: an ID, and a list of <codeph
                id="x-6">Update</codeph>s. The simplest update is assignment, but it's not always
            the best. What if you want to increase someone's age by 1, but you don't have their
            current age? Persistent has you covered:</p>
  <codeblock id="x7" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person sql=the-person-table
    firstName String sql=first_name
    lastName String sql=fldLastName
    age Int Gt Desc "sql=The Age of the Person"
    UniqueName firstName lastName
|]

resultsForPage pageNumber = do
    let resultsPerPage = 10
    selectList
        [ PersonAge &gt;=. 18
        ]
        [ Desc PersonAge
        , Asc PersonLastName
        , Asc PersonFirstName
        , LimitTo resultsPerPage
        , OffsetBy $ (pageNumber - 1) * resultsPerPage
        ]

-- START
haveBirthday personId = update personId [PersonAge +=. 1]
-- STOP

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    update personId [PersonAge =. 27]
    haveBirthday personId
    resultsForPage 1 &gt;&gt;= liftIO . print</codeblock>
  <p id="x8">And as you might expect, we have all the basic mathematical operators:
                <codeph id="x-7">+=.</codeph>, <codeph id="x-8">-=.</codeph>, <codeph id="x-9">*=.</codeph>, and
                <codeph id="x-10">/=.</codeph> (full stop). These can be convenient for updating a single
            record, but they are also essential for proper ACID guarantees. Imagine the alternative:
            pull out a <codeph id="x-11">Person</codeph>, increment the age, and update the new value. If you
            have two threads/processes working on this database at the same time, you're in for a
            world of hurt (hint: race conditions).</p>
  <p id="x9">Sometimes you'll want to update many fields at once (give all your employees a 5% pay
            increase, for example). <codeph id="x-12">updateWhere</codeph> takes two parameters: a list of
            filters, and a list of updates to apply.</p>
  <codeblock id="x10" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person sql=the-person-table
    firstName String sql=first_name
    lastName String sql=fldLastName
    age Int Gt Desc "sql=The Age of the Person"
    UniqueName firstName lastName
|]

resultsForPage pageNumber = do
    let resultsPerPage = 10
    selectList
        [ PersonAge &gt;=. 18
        ]
        [ Desc PersonAge
        , Asc PersonLastName
        , Asc PersonFirstName
        , LimitTo resultsPerPage
        , OffsetBy $ (pageNumber - 1) * resultsPerPage
        ]

haveBirthday personId = update personId [PersonAge +=. 1]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    update personId [PersonAge =. 27]
    haveBirthday personId
    resultsForPage 1 &gt;&gt;= liftIO . print
-- START
    updateWhere [PersonFirstName ==. "Michael"] [PersonAge *=. 2] -- it's been a long day
-- STOP</codeblock>
  <p id="x11">Occassionally, you'll just want to completely replace the value in a database with a
            different value. For that, you use (surprise) the <codeph id="x-13">replace</codeph> function.</p>
  <codeblock id="x12" outputclass="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
import Database.Persist
import Database.Persist.Sqlite
import Database.Persist.TH
import Data.Time
import Control.Monad.IO.Class (liftIO)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person sql=the-person-table
    firstName String sql=first_name
    lastName String sql=fldLastName
    age Int Gt Desc "sql=The Age of the Person"
    UniqueName firstName lastName
|]

resultsForPage pageNumber = do
    let resultsPerPage = 10
    selectList
        [ PersonAge &gt;=. 18
        ]
        [ Desc PersonAge
        , Asc PersonLastName
        , Asc PersonFirstName
        , LimitTo resultsPerPage
        , OffsetBy $ (pageNumber - 1) * resultsPerPage
        ]

haveBirthday personId = update personId [PersonAge +=. 1]

main = withSqliteConn ":memory:" $ runSqlConn $ do
    runMigrationSilent migrateAll
-- START
    personId &lt;- insert $ Person "Michael" "Snoyman" 26
    replace personId $ Person "John" "Doe" 20
-- STOP
    update personId [PersonAge =. 27]
    haveBirthday personId
    updateWhere [PersonFirstName ==. "Michael"] [PersonAge *=. 2] -- it's been a long day
    resultsForPage 1 &gt;&gt;= liftIO . print</codeblock>
</conbody></concept>