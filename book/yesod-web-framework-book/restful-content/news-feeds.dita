<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="news-feeds"><title id="x-1">News Feeds</title><conbody id="x-2"><p id="n1">A great, practical example of multiple representations if the <apiname id="x1">yesod-newsfeed</apiname> package. There are two major formats for news feeds on the web: RSS and Atom. They contain almost exactly the same information, but are just packaged up differently.</p><p id="n2">The <codeph id="x-3">yesod-newsfeed</codeph> package defines a <codeph id="x2">Feed</codeph>
            datatype which contains information like title, description, and last updated time. It
            then provides two separate sets of functions for displaying this data: one for RSS, one
            for Atom. They each define their own representation datatypes:</p><codeblock outputclass="haskell" id="x3">newtype RepAtom = RepAtom Content
instance HasReps RepAtom where
    chooseRep (RepAtom c) _ = return (typeAtom, c)
newtype RepRss = RepRss Content
instance HasReps RepRss where
    chooseRep (RepRss c) _ = return (typeRss, c)</codeblock><p id="n3">But there's a third module which defines another datatype:</p><codeblock outputclass="haskell" id="x4">data RepAtomRss = RepAtomRss RepAtom RepRss
instance HasReps RepAtomRss where
    chooseRep (RepAtomRss (RepAtom a) (RepRss r)) = chooseRep
        [ (typeAtom, a)
        , (typeRss, r)
        ]</codeblock><p id="n4">This datatype will automatically serve whichever representation the client prefers, defaulting to Atom. If a client connects that only understands RSS, assuming it provides the correct HTTP headers, Yesod will provide RSS output.</p></conbody></concept>