<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="request-methods"><title id="x-1">Request methods</title><conbody id="x-2"><p id="rm1">In many web frameworks, you write one handler function per resource. In Yesod, the default is to have a separate handler function for each <term id="x1">request method</term>. The two most common request methods you will deal with in creating web sites are GET and POST. These are the most well-supported methods in HTML, since they are the only ones supported by web forms. However, when creating RESTful APIs, the other methods are very useful.</p><p id="rm2">Technically speaking, you can create whichever request methods you like, but it is strongly recommended to stick to the ones spelled out in the HTTP spec. The most common of these are:</p><dl id="x2"><dlentry id="x3"><dt id="x4">GET</dt><dd id="x5">Read-only requests. Assuming no other changes occur on the server, calling a GET request multiple times should result in the same response, barring such things as "current time" or randomly assigned results.</dd></dlentry><dlentry id="x6"><dt id="x7">POST</dt><dd id="x8">A general mutating request. A POST request should never be submitted twice by the user. A common example of this would be to transfer funds from one bank account to another.</dd></dlentry><dlentry id="x9"><dt id="x10">PUT</dt><dd id="x11">Create a new resource on the server, or replace an existing one. This method <i id="x12">is</i> safe to be called multiple times.</dd></dlentry><dlentry id="x13"><dt id="x14">DELETE</dt><dd id="x15">Just like it sounds: wipe out a resource on the server. Calling multiple times should be OK.</dd></dlentry></dl><p id="rm3">To a certain extent, this fits in very well with Haskell philosophy: a GET request is similar to a pure function, which cannot have side effects. Of course, in practice, your GET functions will probably perform IO, such as reading information from a database, logging user actions, and so on.</p><p id="rm4">See the <xref id="x16" href="../routing-and-handlers/routing-and-handlers.dita">routing and handlers chapter</xref> chapter for more information on the syntax of defining handler functions for each request method.</p></conbody></concept>