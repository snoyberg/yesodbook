<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="arguments"><title id="x-1">Arguments</title><conbody id="x-2"><p id="arguments1">Not every route is as simple as the <codeph>HomeR</codeph> we just defined. Take
            for instance our <codeph>PersonR</codeph> route from earlier. The name of the person
            needs to be passed to the handler function. This translation is very straight-forward,
            and hopefully intuitive. For example:</p><codeblock id="x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
import Data.Text (Text)
import qualified Data.Text as T
data Args = Args
-- START
mkYesod "Args" [parseRoutes|
/person/#Text PersonR GET
/year/#Integer/month/#Text/day/#Int DateR
/wiki/*Texts WikiR GET
|]

getPersonR :: Text -&gt; Handler RepHtml
getPersonR name = defaultLayout [whamlet|&lt;h1&gt;Hello #{name}!|]

handleDateR :: Integer -&gt; Text -&gt; Int -&gt; Handler RepPlain -- text/plain
handleDateR year month day =
    return $ RepPlain $ toContent $
        T.concat [month, " ", T.pack $ show day, ", ", T.pack $ show year]

getWikiR :: [Text] -&gt; Handler RepPlain
getWikiR = return . RepPlain . toContent . T.unwords
-- STOP
instance Yesod Args
main = warpDebug 3000 Args
</codeblock><p id="arguments2">The arguments have the types of the dynamic pieces for each route, in the order specified. Also, notice how we are able to use both <codeph id="x2">RepHtml</codeph> and <codeph id="x3">RepPlain</codeph>.</p></conbody></concept>
