<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="handler-specification"><title id="x-1">Handler specification</title><conbody id="x-2"><p id="rn7">The last piece of the puzzle when declaring your resources is how they will be handled. There are three options in Yesod:</p><ul id="x1"><li id="x2">You have a single handler function which should be used for all request methods.</li><li id="x3">You want to write a separate handler function for each request method you will support. All other request method will generate a 405 Bad Method response.</li><li id="x4">You want to pass off to a <term id="x5">subsite</term>.</li></ul><p id="rn8">The first two can be easily specified. A single handler function will be a line with
            just a resource pattern and the resource name, such as <codeph id="x6">/page/faq
                FaqR</codeph>. In this case, the handler function must be named <codeph id="x7">handleFaqR</codeph>.</p><p id="rn9">A separate handler for each request method will be the same, plus a list of request
            methods. The request methods must be all capital letters. For example, <codeph id="x8"
                >/person/#String PersonR GET POST DELETE</codeph>. In this case, you would need to
            define three handler functions: <codeph id="x9">getPersonR</codeph>, <codeph id="x10"
                >postPersonR</codeph> and <codeph id="x11">deletePersonR</codeph>.</p><p id="rn10">Subsites are a very useful— but complicated— topic in Yesod. We
                 will <xref id="x12" href="../creating-a-subsite/creating-a-subsite.dita">cover writing subsites
                     later</xref>, but using them is not too difficult. The
                 most commonly used subsite is the static subsite, which serves
                 static files for your application. In order to serve static
                 files from <codeph id="x13">/static</codeph>, you would need a resource
                 line like:</p><codeblock outputclass="routes" id="x14">/static StaticR Static getStatic</codeblock><p id="rn11">In this line, <codeph id="x15">/static</codeph> just says where in your URL
                 structure to serve the static files from. There is nothing
                 magical about the word static, you could easily replace it
                 with <codeph id="x16">/my/non-dynamic/files</codeph>.</p><p id="rn12">The next word, <codeph id="x-3">StaticR</codeph>, gives the resource name. The next two words
            are what specify that we are using a subsite. <codeph id="x17">Static</codeph> is the
            name of the <term id="x18">subsite foundation datatype</term>, and <codeph id="x19">getStatic</codeph> is a function that gets a <codeph id="x20">Static</codeph> value
            from a value of your master foundation datatype.</p><p id="rn13">Let's not get too caught up in the details of subsites now. We
                 will look more closely at the static subsite in the <xref id="x21" href="../scaffolding-and-the-site-template/scaffolding-and-the-site-template.dita">scaffolded site chapter</xref>.</p></conbody></concept>