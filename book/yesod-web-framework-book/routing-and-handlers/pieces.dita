<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="pieces"><title id="x-1">Pieces</title><conbody id="x-2"><p id="pieces1">One of the first thing Yesod does when it gets a request is split up the requested
                                                path into pieces. The pieces are simply tokenized at
                                                all forward slashes. So:</p><codeblock id="x2" outputclass="haskell">toPieces "/" = []
toPieces "/foo/bar/baz/" = ["foo", "bar", "baz", ""]</codeblock><p id="pieces2">You may notice that there are some funny things going on with
                trailing slashes, or double slashes ("/foo//bar//"), or a few
                other things. Yesod believes in having <term id="x3">canonical
                    URLs</term>; if someone requests a URL with a trailing
                slash, or with a double slash, they automatically get a
                redirect to the canonical version. This follows the RESTful
                principle of one URL for one resource, and can help with your
                search rankings.</p><p id="pieces3">What this means for you is that you needn't concern yourself
                with the exact structure of your URLs: you can safely think
                about pieces of a path, and Yesod automatically handles
                intercalating the slashes and escaping problematic
                characters.</p><p id="pieces4">If, by the way, you want more fine-tuned control of how paths
                are split into pieces and joined together again, you'll want to
                look at the cleanPath and joinPath methods in the <xref id="x4" href="../yesod-typeclass/joinpath.dita">Yesod
                    typeclass</xref> chapter.</p></conbody></concept>