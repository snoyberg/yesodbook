<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="return-type"><title id="x-1">Return Type</title><conbody id="x-2"><p id="dispatch2">Let's look at a simple handler function:</p><codeblock id="x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Simple = Simple
-- START
mkYesod "Simple" [parseRoutes|
/ HomeR GET
|]

getHomeR :: Handler RepHtml
getHomeR = defaultLayout [whamlet|&lt;h1&gt;This is simple
|]
-- STOP
instance Yesod Simple where approot _ = ""
main = warpDebug 3000 Simple
</codeblock><p id="dispatch3">Look at the type signature of getHomeR. The first component is
                <codeph>Handler</codeph>. Handler is a special monad that all handler functions live
            in. It provides access to request information, let's you send redirects, and lots of
            other stuff we'll <xref href="the-ghandler-monad.dita#the-ghandler-monad" format="dita"
                >get to soon</xref>.</p>
        <p>Next we have <codeph>RepHtml</codeph>. When we <xref
                href="../../yesod-web-framework-book/restful-content/representations.dita">discuss
                representations</xref> we will explore the <i>why</i> of things more; for now, we
            are just interested in the <i>how</i>.</p>
        <p>As you might guess, RepHtml is a datatype for HTML responses. But as you also may guess,
            web sites need to return responses besides HTML. CSS, Javascript, images, XML are all
            necessities of a website. Therefore, the return value of a handler function can be any
            instance of <codeph>HasReps</codeph>.</p>
        <p>HasReps is a powerful concept that allows Yesod to automatically choose the correct
            representation of your data based on the client request. For now, we will focus just on
            simple instances such as RepHtml, which only provide one representation.</p></conbody></concept>