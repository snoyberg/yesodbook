<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="routing-and-handlers"><title id="x-1">Routing and Handlers</title><conbody id="x-2"><p id="intro1">If we look at Yesod as a Model-View-Controller framework, routing and handlers make up the controller. For contrast, let's describe two other routing approaches used in other web development environments:</p><ul id="x1"><li id="x2">Dispatch based on file name. This is how PHP and ASP work, for example.</li><li id="x3">Have a centralized routing function that parses routes based on regular expressions. Django and Rails follow this approach.</li></ul><p id="intro2">Yesod is closer in principle to the latter technique. Even so, there are significant differences. Instead of using regular expressions, Yesod matches on pieces of a route. Instead of having a one-way route-to-handler mapping, Yesod has an intermediate data type (called the route datatype, or a type-safe URL) and creates two-way conversion functions.</p><p id="intro3">Coding this more advanced system manually is tedious and error prone. Therefore,
            Yesod relies heavily on Template Haskell to automatically generate this code for you.
            This chapter will explain the syntax of the routing declarations, give you a glimpse of
            what code is generated for you, and explain the interaction between routing and handler
            functions.</p></conbody></concept>