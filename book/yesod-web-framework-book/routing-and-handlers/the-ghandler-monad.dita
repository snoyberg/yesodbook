<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="the-ghandler-monad"><title id="x-1">The Handler Monad</title><conbody id="x-2"><p id="ghandler1">The vast majority of code you write in Yesod sits in the Handler monad. If you are
            approaching this from an MVC (MVC) background, your GHandler code is the Controller.
            Some important points to know about GHandler:</p><ul id="x1"><li id="x2">It is an instance of <codeph id="x3">MonadIO</codeph>, so you can run any IO action in your handlers with <codeph id="x4">liftIO</codeph>. By the way, <codeph id="x5">liftIO</codeph> is exported by the <codeph id="x6">Yesod</codeph> module for your convenience.</li><li id="x7">GHandler is really a <term id="x8">monad transformer stack</term> providing a number of different components.</li><li id="x9">A Reader component provides access to immutable information about a request and the environment: the foundation value, request headers and much more.</li><li id="x10">A Writer component allows you to add extra response headers.</li><li id="x11">A State component deals with session variables, allowing them to be both read, written and deleted. Sessions are discussed in <xref id="x12" href="../../yesod-web-framework-book/sessions/sessions.dita">their own chapter</xref>.</li><li id="x13">An Error component deals with <term id="x14">short-circuiting</term>. Despite the name, these are not necessarily errors: you can use this for sending static files and redirecting in addition to sending error responses.</li></ul><note id="x15" type="other" othertype="advanced"><p id="ghandler1a">It's actually not quite as simpler as a Handler. There is a more general version,
                called a GHandler, which allows you to specify the subsite and master site. Each
                application has the following type alias
                defined:<codeblock outputclass="haskell">type Handler = GHandler MyApp MyApp</codeblock>And on top of all
                this, there is in fact a larger generalization from GHandler- a GGHandler- which
                allows you to replace the inner monad. While a GHandler wraps around an Iteratee,
                which allows it to read the request body, a GGHandler can wrap around any monad,
                including directly around IO. This generalization is necessary for dealing with
                catching exceptions. We will discuss this in more depth later. The relationship
                between GHandler and GGHandler
                is:<codeblock outputclass="haskell">type GHandler sub master = GGHandler sub master (Iteratee ByteString IO)</codeblock></p></note><p id="ghandler2">The remainder of this chapter will give a brief introduction to some of the most
            common functions living in the Handler monad. I am specifically <i id="x16">not</i>
            covering any of the session functions; that will be addressed in the <xref id="x17"
                href="../../yesod-web-framework-book/sessions/sessions.dita">sessions
            chapter</xref>.</p></conbody></concept>
