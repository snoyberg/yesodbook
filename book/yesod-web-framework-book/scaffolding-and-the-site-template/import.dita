<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Import</title>
 <conbody>
  <p>The Import module was born out of a few commonly recurring patterns.</p>
  <ul id="ul_skn_hbh_oe">
   <li>I want to define some helper functions (maybe the <codeph>&lt;> = mappend</codeph> opterator)
    to be used by all handlers.</li>
   <li>I'm always adding the same five import statements (Data.Text, Control.Applicative, etc) to
    every handler module.</li>
   <li>I want to make sure I never use some evil function (head, readFile, ...) from
     Prelude.<note>Yes, evil is hyperbole. If you're wondering why I listed those functions are bad:
      <codeph>head</codeph> is partial, and throws exceptions on an empty list, and
      <codeph>readFile</codeph> uses lazy I/O, which doesn't close file handles quickly enough.
     Also, readFile uses String instead of Text.</note></li>
  </ul>
  <p>The solution is to turn on the NoImplicitPrelude language extension, re-export the parts of
   Prelude we want, add in all the other stuff we want, define our own functions as well, and then
   import this file in all handlers.</p>
 </conbody>
</concept>
