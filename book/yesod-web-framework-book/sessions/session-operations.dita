<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="session-operations"><title id="x-1">Session Operations</title><conbody id="x-2"><p id="o1">Like most frameworks, sessions in Yesod are simple key-value
            stores. The base session API boils down to just three functions:
            <codeph id="x1">lookupSession</codeph> gets a value for a key (if available),
            <codeph id="x2">setSession</codeph> sets a value for a key, and
            <codeph id="x3">deleteSession</codeph> clears a value for a key.</p><codeblock id="x4" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, TemplateHaskell, MultiParamTypeClasses, OverloadedStrings #-}
import Yesod
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Session = Session

mkYesod "Session" [parseRoutes|
/ Root GET POST
|]

getRoot :: Handler RepHtml
getRoot = do
    sess &lt;- getSession
    hamletToRepHtml [hamlet|
&lt;form method=post&gt;
    &lt;input type=text name=key&gt;
    &lt;input type=text name=val&gt;
    &lt;input type=submit&gt;
&lt;h1&gt;#{show sess}
|]

postRoot :: Handler ()
postRoot = do
    (key, mval) &lt;- runInputPost $ (,) &lt;$&gt; ireq textField "key" &lt;*&gt; iopt textField "val"
    case mval of
        Nothing -&gt; deleteSession key
        Just val -&gt; setSession key val
    liftIO $ print (key, mval)
    redirect RedirectTemporary Root

instance Yesod Session where
    approot _ = ""
    clientSessionDuration _ = 1

instance RenderMessage Session FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Session</codeblock></conbody></concept>