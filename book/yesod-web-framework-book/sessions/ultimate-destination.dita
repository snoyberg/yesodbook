<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="ultimate-destination"><title id="x-1">Ultimate Destination</title><conbody id="x-2"><p id="u1">Not to be confused with a horror film, this concept is used internally in <apiname id="x1">yesod-auth</apiname>. Suppose a user requests a page that requires
            authentication. If the user is not yet logged in, you need to send him/her to the login
            page. A well-designed web app will then <i id="x2">send them back to the first page they
                requested</i>. That's what we call the ultimate destination.</p><p id="u2"><codeph id="x3">redirectUltDest</codeph> sends the user to the ultimate destination set
            in his/her session, clearing that value from the session. It takes a default destination
            as well, in case there is no destination set. For setting the session, there are three
                options:<ul id="ul_pms_cyz_ze">
                <li id="x-3"><codeph id="x4">setUltDest</codeph> sets the destination to the given URL</li>
                <li id="x-4"><codeph id="x6">setUltDestCurrent</codeph> sets the destination to the currently
                    requested URL.</li>
                <li id="x-5"><codeph id="x-6">setUltDestReferer</codeph> sets the destination based on the
                        <codeph id="x-7">Referer</codeph> header (the page that led the user to the current
                    page).</li>
            </ul></p>
        <p>Let's look at a small sample app. It will allow the user to set his/her name in the
            session, and then tell the user his/her name from another route. If the name hasn't been
            set yet, the user will be redirected to the set name page, with an ultimate destination
            set to come back to the current page.</p>
        <codeblock outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, MultiParamTypeClasses #-}
import Yesod

data UltDest = UltDest

mkYesod "UltDest" [parseRoutes|
/ RootR GET
/setname SetNameR GET POST
/sayhello SayHelloR GET
|]

instance Yesod UltDest

instance RenderMessage UltDest FormMessage where
    renderMessage _ _ = defaultFormMessage

getRootR = defaultLayout [whamlet|
&lt;p>
    &lt;a href=@{SetNameR}>Set your name
&lt;p>
    &lt;a href=@{SayHelloR}>Say hello
|]

-- Display the set name form
getSetNameR = defaultLayout [whamlet|
&lt;form method=post>
    My name is #
    &lt;input type=text name=name>
    . #
    &lt;input type=submit value="Set name">
|]

-- Retreive the submitted name from the user
postSetNameR :: Handler ()
postSetNameR = do
    -- Get the submitted name and set it in the session
    name &lt;- runInputPost $ ireq textField "name"
    setSession "name" name

    -- After we get a name, redirect to the ultimate destination.
    -- If no destination is set, default to the homepage
    redirectUltDest RootR

getSayHelloR = do
    -- Lookup the name value set in the session
    mname &lt;- lookupSession "name"
    case mname of
        Nothing -> do
            -- No name in the session, set the current page as
            -- the ultimate destination and redirect to the
            -- SetName page
            setUltDestCurrent
            setMessage "Please tell me your name"
            redirect SetNameR
        Just name -> defaultLayout [whamlet|
&lt;p>Welcome #{name}
|]

main :: IO ()
main = warpDebug 3000 UltDest</codeblock></conbody></concept>