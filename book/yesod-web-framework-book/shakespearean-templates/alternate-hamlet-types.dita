<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="alternate-hamlet-types"><title id="x-1">Alternate Hamlet Types</title><conbody id="x-2">
  <p id="x1">So far, we've seen how to generate an <codeph id="x2">HtmlUrl</codeph> value from Hamlet, which is a
   piece of HTML with embedded type-safe URLs. There are currently three other values we can
   generate using Hamlet: plain HTML, HTML with URLs <b id="x3">and</b> internationalized messages, and
   widgets. That last one will be covered in the widgets chapter.</p>
  <p id="x4">To generate plain HTML without any embedded URLs, we use "simplified Hamlet". There are a few
    changes:<ul id="ul_ker_khu_id">
    <li id="x5">We use a different set of functions, prefixed with an "s". So the quasiquoter is
      <codeph id="x6">shamlet</codeph> and the external file function is <codeph id="x7">shamletFile</codeph>. How
     we pronounce those is still up for debate.</li>
    <li id="x8">No URL interpolation is allowed. Doing so will result in a compile-time error.</li>
    <li id="x9">Embedding (the caret-interpolator) no longer allows arbitrary <codeph id="x10">HtmlUrl</codeph> values. The rule is that the embedded value must have the same type as the
     template itself, so in this case it must be <codeph id="x11">Html</codeph>. That means that for
      <codeph id="x-3">shamlet</codeph>, embedding can be completely replaced with normal variable
     interpolation (with a hash).</li>
   </ul></p>
  <p id="x12">Dealing with internationalization (i18n) in Hamlet is a bit complicated. Hamlet
   supports i18n via a message datatype, very similar in concept and implementation to a type-safe
   URL. As a motivating example, let's say we want to have an application that tells you hello and
   how many apples you have eaten. We could represent those messages with a
   datatype.<codeblock id="x13" outputclass="haskell">data Msg = Hello | Apples Int</codeblock>Next,
   we would want to be able to convert that into something human-readable, so we define some render
   functions:<codeblock outputclass="haskell" id="x14">renderEnglish :: Msg -&gt; Text
renderEnglish Hello = "Hello"
renderEnglish (Apples 0) = "You did not buy any apples."
renderEnglish (Apples 1) = "You bought 1 apple."
renderEnglish (Apples i) = T.concat ["You bought ", T.pack $ show i, " apples."]</codeblock>Now
   we want to interpolate those Msg values directly in the template. For that, we use underscore
   interpolation.<codeblock outputclass="hamlet" id="x15">$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;i18n
    &lt;body&gt;
        &lt;h1&gt;_{Hello}
        &lt;p&gt;_{Apples count}</codeblock></p>
  <p id="x16">This kind of a template now needs some way to turn those values into HTML. So just
   like type-safe URLs, we pass in a render function. To represent this, we define a new type
   synonym:<codeblock outputclass="haskell" id="x17">type Render url = url -&gt; [(Text, Text)] -&gt; Text
type Translate msg = msg -&gt; Html
type HtmlUrlI18n msg url = Translate msg -&gt; Render url -&gt; Html</codeblock>At
   this point, you can pass <codeph id="x-4">renderEnglish</codeph>, <codeph id="x-5"
    >renderSpanish</codeph>, or <codeph id="x-6">renderKlingon</codeph> to this template, and it
   will generate nicely translated output (depending, of course, on the quality of your
   translators). The complete program is:</p>
  <codeblock outputclass="haskell" id="x20">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Data.Text (Text)
import qualified Data.Text as T
import Text.Hamlet (HtmlUrlI18n, ihamlet)
import Text.Blaze (toHtml)
import Text.Blaze.Renderer.String (renderHtml)

data MyRoute = Home | Time | Stylesheet

renderUrl :: MyRoute -&gt; [(Text, Text)] -&gt; Text
renderUrl Home _ = "/home"
renderUrl Time _ = "/time"
renderUrl Stylesheet _ = "/style.css"

data Msg = Hello | Apples Int

renderEnglish :: Msg -&gt; Text
renderEnglish Hello = "Hello"
renderEnglish (Apples 0) = "You did not buy any apples."
renderEnglish (Apples 1) = "You bought 1 apple."
renderEnglish (Apples i) = T.concat ["You bought ", T.pack $ show i, " apples."]

template :: Int -&gt; HtmlUrlI18n Msg MyRoute
template count = [ihamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;i18n
    &lt;body&gt;
        &lt;h1&gt;_{Hello}
        &lt;p&gt;_{Apples count}
|]

main :: IO ()
main = putStrLn $ renderHtml
     $ (template 5) (toHtml . renderEnglish) renderUrl</codeblock>
 </conbody></concept>
