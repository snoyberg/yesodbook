<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="calling-shakespeare"><title id="x-1">Calling Shakespeare</title><conbody id="x-2">  <p id="x1">The question of course arises at some point: how do I actually use this stuff? There are three
   different ways to call out to Shakespeare from your Haskell code:</p>
  <dl id="x2">
   <dlentry id="x3">
    <dt id="x4">Quasiquotes</dt>
    <dd id="x5">Quasiquotes allow you to embed arbitrary content within your Haskell, and for it to be
     converted into Haskell code at compile time.</dd>
   </dlentry>
   <dlentry id="x6">
    <dt id="x7">External file</dt>
    <dd id="x8">In this case, the template code is in a separate file which is referenced via Template
     Haskell.</dd>
   </dlentry>
   <dlentry id="x9">
    <dt id="x10">Reload mode</dt>
    <dd id="x11">Both of the above modes require a full recompile to see any changes. In reload
     mode, your template is kept in a separate file and referenced via Template Haskell. But at
     runtime, the external file is reparsed from scratch each time.<note id="x12">Reload mode is not
      available for Hamlet, only for Cassius, Lucius and Julius. There are too many sophisticated
      features in Hamlet that rely directly on the Haskell compiler and could not feasible be
      reimplemented at runtime.</note></dd>
   </dlentry>
  </dl>
  <p id="x13">One of the first two approaches should be used in production. They both embed the entirety of
   the template in the final executable, simplifying deployment and increasing performance. The
   advantage of the quasiquoter is the simplicity: everything stays in a single file. For short
   templates, this can be a very good fit. However, in general, the external file approach is
   recommended because:<ul id="ul_bbc_seu_id">
    <li id="x14">It follows nicely in the tradition of separate logic from presentation.</li>
    <li id="x15">You can easily switch between external file and debug mode with some simple CPP macros,
     meaning you can keep rapid development and still achieve high performance in production.</li>
   </ul></p>
  <p id="x16">Since these are special quasiquoters and TH functions, you need to be sure to enable
   the appropriate language extensions and use correct syntax. You can see a simple example of each
   in the figures.</p>
  <fig id="x17">
   <title id="x18">Quasiquoter</title>
   <codeblock id="x19" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-} -- we're using Text below
{-# LANGUAGE QuasiQuotes #-}
import Text.Hamlet (HtmlUrl, hamlet)
import Data.Text (Text)
import Text.Blaze.Renderer.String (renderHtml)

data MyRoute = Home | Time | Stylesheet

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"
render Time _ = "/time"
render Stylesheet _ = "/style.css"

template :: Text -&gt; HtmlUrl MyRoute
template title = [hamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        &lt;link rel=stylesheet href=@{Stylesheet}&gt;
    &lt;body&gt;
        &lt;h1&gt;#{title}
|]

main :: IO ()
main = putStrLn $ renderHtml $ template "My Title" render</codeblock>
  </fig>
  <fig id="x20">
   <title id="x21">External file</title>
   <codeblock id="x22" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-} -- we're using Text below
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE CPP #-} -- to control production versus debug
import Text.Lucius (CssUrl, luciusFile, luciusFileDebug, renderCss)
import Data.Text (Text)
import qualified Data.Text.Lazy.IO as TLIO

data MyRoute = Home | Time | Stylesheet

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"
render Time _ = "/time"
render Stylesheet _ = "/style.css"

template :: CssUrl MyRoute
#if PRODUCTION
template = $(luciusFile "template.lucius")
#else
template = $(luciusFileDebug "template.lucius")
#endif

main :: IO ()
main = TLIO.putStrLn $ renderCss $ template render</codeblock>
   <codeblock outputclass="lucius" id="x51">-- @template.lucius
foo { bar: baz }</codeblock>
  </fig>
  <p id="x23">The naming scheme for the functions is very consistent.</p>
  <simpletable id="simpletable_kvg_tgu_id">
   <sthead id="x24">
    <stentry id="x25">Language</stentry>
    <stentry id="x26">Quasiquoter</stentry>
    <stentry id="x27">External file</stentry>
    <stentry id="x28">Reload</stentry>
   </sthead>
   <strow id="x29">
    <stentry id="x30">Hamlet</stentry>
    <stentry id="x31"><apiname id="x50">hamlet:Text.Hamlet:hamlet</apiname></stentry>
    <stentry id="x32"><codeph>hamletFile</codeph></stentry>
    <stentry id="x33"><i id="x34">N/A</i></stentry>
   </strow>
   <strow id="x35">
    <stentry id="x36">Cassius</stentry>
    <stentry id="x37"><codeph>cassius</codeph></stentry>
    <stentry id="x38"><codeph>cassiusFile</codeph></stentry>
    <stentry id="x39"><codeph>cassiusFileReload</codeph></stentry>
   </strow>
   <strow id="x40">
    <stentry id="x41">Lucius</stentry>
    <stentry id="x42"><codeph>lucius</codeph></stentry>
    <stentry id="x43"><codeph>luciusFile</codeph></stentry>
    <stentry id="x44"><codeph>luciusFileReload</codeph></stentry>
   </strow>
   <strow id="x45">
    <stentry id="x46">Julius</stentry>
    <stentry id="x47"><codeph>julius</codeph></stentry>
    <stentry id="x48"><codeph>juliusFile</codeph></stentry>
    <stentry id="x49"><codeph>juliusFileReload</codeph></stentry>
   </strow>
  </simpletable>
 </conbody></concept>
