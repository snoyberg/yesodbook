<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="interpolation"><title id="x-1">Interpolation</title><conbody id="x-2">  <p id="x1">What we have so far is a nice, simplified HTML, but it doesn't let us interact with our Haskell
   code at all. How do we pass in variables? Simple: with
   interpolation:<codeblock outputclass="hamlet" id="x2">&lt;head&gt;
    &lt;title&gt;#{title}</codeblock>The hash followed by a pair
   of braces denotes <b id="x3">variable interpolation</b>. In the case above, the <codeph id="x4">title</codeph>
   variable from the scope in which the template was called will be used. Let me state that again:
   Hamlet automatically has access to the variables in scope when it's called. There is no need to
   specifically pass variables in.</p>
  <p id="x5">You can apply functions within an interpolation. You can use string and numeric
   literals in an interpolation. You can use qualified modules. Both parentheses and the dollar sign
   can be used to group statements together. And at the end, the <codeph id="x-3">toHtml</codeph>
   function is applied to the result, meaning <i id="x6">any</i> instance of <codeph id="x-4"
    >ToHtml</codeph> can be interpolated. Take, for instance, the following code.</p>
  
   <codeblock id="x9" outputclass="haskell">-- Just ignore the quasiquote stuff for now, and that shamlet thing.
-- It will be explained later.
{-# LANGUAGE QuasiQuotes #-}
import Text.Hamlet (shamlet)
import Text.Blaze.Renderer.String (renderHtml)
import Data.Char (toLower)
import Data.List (sort)

data Person = Person
    { name :: String
    , age  :: Int
    }

main :: IO ()
main = putStrLn $ renderHtml [shamlet|
&lt;p&gt;Hello, my name is #{name person} and I am #{show $ age person}.
&lt;p&gt;
    Let's do some funny stuff with my name: #
    &lt;b&gt;#{sort $ map toLower (name person)}
&lt;p&gt;Oh, and in 5 years I'll be #{show ((+) 5 (age person))} years old.
|]
  where
    person = Person "Michael" 26</codeblock>
  
  <p id="x10">What about our much-touted type-safe URLs? They are almost identical to variable
   interpolation in every way, except they start with an at-sign (@) instead. In addition, there is
   embedding via a caret (^) which allows you to embed another template of the same type. The next
   code sample demonstrates both of these.</p>
   <codeblock outputclass="haskell" id="x13">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Text.Hamlet (HtmlUrl, hamlet)
import Text.Blaze.Renderer.String (renderHtml)
import Data.Text (Text)

data MyRoute = Home

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"

footer :: HtmlUrl MyRoute
footer = [hamlet|
&lt;footer&gt;
    Return to #
    &lt;a href=@{Home}&gt;Homepage
    .
|]

main :: IO ()
main = putStrLn $ renderHtml $ [hamlet|
&lt;body&gt;
    &lt;p&gt;This is my page.
    ^{footer}
|] render</codeblock>
 </conbody></concept>
