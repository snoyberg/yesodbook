<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="type-safe-urls"><title id="x-1">Type-safe URLs</title><conbody id="x-2">
  <p id="x1">One of the biggest unique features in Yesod is type-safe URLs, and the ability to use them
   conveniently is provided directly by Shakespeare. Usage is very similar to variable
   interpolation, we just use the at-sign (@) instead. We'll cover the syntax later; first, let's
   clarify the intuition.</p>
  <p id="x2">Let's say that we've got an application with two routes:
    <filepath id="x3">http://example.com/profile/home</filepath> is the homepage, and
    <filepath id="x4">http://example.com/display/time</filepath> displays the current time. And let's say we
   want to link from the homepage to the time. I can think of three different ways of constructing
   the URL:<ol id="ol_4c46dd3b-9cb4-4c02-ac0c-c70e5a19d0c5">
    <li id="x5">As a relative link: <filepath id="x6">../display/time</filepath></li>
    <li id="x7">As an absolute link, without a domain: <filepath id="x8">/display/time</filepath></li>
    <li id="x9">As an absolute link, with a domain:
     <filepath id="x10">http://example.com/display/time</filepath></li>
   </ol></p>
  <p id="x11">There are problems with each approach: the first will break if either URL changes. Also, it's
   not suitable for all use cases; RSS and Atom feeds, for instance, require absolute URLs. The
   second is more resilient to change than the first, but still won't be acceptable for RSS and
   Atom. And while the third works fine for all use cases, you'll need to update every single URL in
   your application whenever your domain name changes. You think that doesn't happen often? Just
   wait till you move from your development to staging and finally production server.</p>
  <p id="x12">But more importantly, there is one huge problem with all approaches: if you change your routes
   at all, the compiler won't warn you about the broken links. Not to mention that typos can wreak
   havoc as well.</p>
  <p id="x13">The goal of type-safe URLs is to let the compiler check things for us as much as possible. In
   order to facilitate this, our first step must be to move away from plain old text, which the
   compiler doesn't understand, to some well defined datatypes. For our simple application, let's
   model our routes with a simple sum type:<codeblock outputclass="haskell" id="x14">data MyRoute = Home | Time</codeblock></p>
  <p id="x15">Now instead of placing a link like /display/time in our template, we can just use the Time
   constructor. But at the end of the day, HTML is made up of text, not data types, so we need some
   way to convert these values to text. We call this a <term id="x16">URL rendering function</term>, and a
   simple one
   is:<codeblock outputclass="haskell" id="x17">renderMyRoute :: MyRoute -&gt; Text
renderMyRoute Home = "http://example.com/profile/home"
renderMyRoute Time = "http://example.com/display/time"</codeblock></p>
  <p id="x18">URL rendering functions are actually a bit more complicated than this. They need to address
   query string parameters, handle records within the constructor, more intelligently handle the
   domain name. But in practice, you don't need to worry about this, since Yesod will automatically
   create your render functions. The one thing to point out is that the type signature is actually a
   little more complicated to handle query
   strings:<codeblock outputclass="haskell" id="x19">type Query = [(Text, Text)]
type Render url = url -&gt; Query -&gt; Text
renderMyRoute :: Render MyRoute
renderMyRoute Home _ = ...
renderMyRoute Time _ = ...</codeblock></p>
  <p id="x20">OK, we have our render function, and we have type-safe URLs embedded in the templates. How does
   this fit together exactly? Well, instead of generating an Html (or Css or Javascript) value
   directly, Shakespearean templates actually produce a function, that takes this render function
   and produces HTML. To see this better, let's have a quick (fake) peek at how Hamlet would work
   under the surface. Supposing we had a
   template:<codeblock outputclass="hamlet" id="x21">&lt;a href=@{Time}&gt;The time</codeblock>this would translate roughly into the
   Haskell
   code:<codeblock outputclass="haskell" id="x22">\render -&gt; mconcat ["&lt;a href='", render Time, "'&gt;The time&lt;/a&gt;"]</codeblock></p>
 </conbody></concept>