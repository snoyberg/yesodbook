<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="combining-widgets"><title id="x-1">Combining Widgets</title><conbody id="x-2">
  <p id="x1">The whole idea of widgets is to increase composability. You can take these individual
   pieces of HTML, CSS and Javascript, combine them together into something more complicated, and
   then combine these larger entities into complete pages. This all works naturally through the
    <codeph id="x-3">Monad</codeph> instance of <codeph id="x-4">Widget</codeph>, meaning you can use do-notation to
   compose pieces together.</p>
  <fig id="x2">
   <title id="x3">Combining Widgets</title>
   <codeblock id="x4" outputclass="haskell">myWidget1 = do
    toWidget [hamlet|&lt;h1&gt;My Title|]
    toWidget [lucius|h1 { color: green } |]

myWidget2 = do
    setTitle "My Page Title"
    addScriptRemote "http://www.example.com/script.js"

myWidget = do
    myWidget1
    myWidget2

-- or, if you want
myWidget' = myWidget1 &gt;&gt; myWidget2</codeblock>
  </fig>
  <note id="x5">If you're so inclined, there's also a <codeph id="x-5">Monoid</codeph> instance of
    <codeph id="x-6">Widget</codeph>, meaning you can use <codeph id="x-7">mconcat</codeph> or a
    <codeph id="x-8">Writer</codeph> monad to build things up. In my experience, it's easiest and most
   natural to just use do-notation.</note>
 </conbody></concept>