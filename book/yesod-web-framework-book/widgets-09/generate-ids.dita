<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="generate-ids"><title id="x-1">Generate IDs</title><conbody id="x-2">
  <p id="x1">If we're really going for true code reuse here, we're eventually going to run into name
   conflicts. Let's say that there are two helper libraries that both use the class name "foo" to
   affect styling. We want to avoid such a possibility. Therefore, we have the
    <codeph>newIdent</codeph> function. This function automatically generates a word that is unique
   for this handler.</p>
  <fig id="x2">
   <title id="x3">Using newIdent</title>
   <codeblock id="x4" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
import Yesod

data W = W

instance Yesod W

mkYesod "W" [parseRoutes|
/ RootR GET
|]

-- START
getRootR = defaultLayout $ do
    headerClass &lt;- lift newIdent
    toWidget [hamlet|&lt;h1 .#{headerClass}&gt;My Header|]
    toWidget [lucius| .#{headerClass} { color: green; } |]
-- STOP

main = warpDebug 3000 W</codeblock>
  </fig>
  <note id="x5">You might be wondering: what does lift mean? A <codeph>Widget</codeph> is a monad
   transformer, sitting on top of a <codeph>Handler</codeph>. <codeph>newIdent</codeph> is a
   function of a <codeph>Handler</codeph>, so we need to "lift" the function from the
    <codeph>Handler</codeph> layer to the <codeph>Widget</codeph> layer to use it. We can actually
   use this same approach to perform complex actions, like database queries, from within a widget.
   We'll cover that when we discuss <xref id="x-3"
    href="../yesods-monads/yesods-monads.dita#conceptId" format="dita">Yesod's monads</xref>.</note>
 </conbody></concept>
