<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="whamlet"><title id="x-1">whamlet</title><conbody id="x-2">
  <p id="x1">Let's say you've got a fairly standard Hamlet template, that embeds another Hamlet template to
   represent the footer:</p>
  <codeblock outputclass="haskell" id="x2">page = [hamlet|
&lt;p&gt;This is my page. I hope you enjoyed it.
^{footer}
|]

footer = [hamlet|
&lt;footer&gt;
    &lt;p&gt;That's all folks!
|]</codeblock>
  <p id="x3">That works fine if the footer is plain old HTML, but what if we want to add some style? Well,
   we can easily spice up the footer by turning it into a Widget:</p>
  <codeblock outputclass="haskell" id="x4">footer = do
    toWidget [lucius| footer { font-weight: bold; text-align: center } |]
    toWidget [hamlet|
&lt;footer&gt;
    &lt;p&gt;That's all folks!
|]</codeblock>
  <p id="x5">But now we've got a problem: a Hamlet template can only embed another Hamlet template; it knows
   nothing about a Widget. This is where whamlet comes in. It takes exactly the same syntax as
   normal Hamlet, and variable (#{...}) and URL (@{...}) interpolation are unchanged. But embedding
   (^{...}) takes a widget, and the final result is a widget. To use it, we can just do:</p>
  <codeblock outputclass="haskell" id="x6">page = [whamlet|
&lt;p&gt;This is my page. I hope you enjoyed it.
^{footer}
|]</codeblock>
  <p id="x7">There is also whamletFile, if you would prefer to keep your template in a separate
      file.</p>
    <note>The scaffolded site has an even more convenient function, <codeph>widgetFile</codeph>,
      which will also include your Lucius, Cassius, and Julius files automatically. We'll cover that
      in the <xref
        href="../scaffolding-and-the-site-template/scaffolding-and-the-site-template.dita#scaffolding-and-the-site-template"
        format="dita">scaffolding chapter</xref>.</note>
 </conbody></concept>