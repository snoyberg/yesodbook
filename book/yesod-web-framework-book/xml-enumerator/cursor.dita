<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="cursor">
 <title id="x-1">Cursor</title>
 <conbody id="x-2">
  <p id="x-3">Suppose you want to pull the title out of an XHTML document. You could do so with the
    <codeph id="x-49">Text.XML</codeph> interface we just described, using standard pattern matching on the
   children of elements. But that would get very tedious, very quickly. Probably the gold standard
   for these kinds of lookups is XPath, where you would be able to write <codeph id="x-4">/html/head/title</codeph>. And that's exactly what inspired the design of the <apiname id="x-5">xml-conduit:Text.XML.Cursor</apiname> combinators.</p>
  <p id="x-6">A cursor is an XML node that knows its location in the tree; it's able to traverse
   upwards, sideways, and downwards. (Under the surface, this is achieved by <xref id="x-7" href="http://www.haskell.org/haskellwiki/Tying_the_Knot" format="html" scope="external">tying
    the knot</xref>.) There are two functions available for creating cursors from
    <codeph id="x-50">Text.XML</codeph> types: <codeph id="x-51">fromDocument</codeph> and
   <codeph id="x-52">fromNode</codeph>.</p>
  <p id="x-8">We also have the concept of an <term id="x-9">Axis</term>, defined as <codeph id="x-10">type Axis = Cursor -&gt; [Cursor]</codeph>. It's easiest to get started by looking at
   example axes: child returns zero or more cursors that are the child of the current one, parent
   returns the single parent cursor of the input, or an empty list if the input is the root element,
   and so on.</p>
  <p id="x-11">In addition, there are some axes that take predicates. <codeph id="x-12">element</codeph> is a commonly
   used function that filters down to only elements which match the given name. For example,
    <codeph id="x-13">element "title"</codeph> will return the input element if its name is "title", or an
   empty list otherwise.</p>
  <p id="x-14">Another common function which isn't quite an axis is <codeph id="x-15">content :: Cursor -&gt;
    [Text]</codeph>. For all content nodes, it returns the contained text; otherwise, it returns an
   empty list.</p>
  <p id="x-16">And thanks to the monad instance for lists, it's easy to string all of these
   together. For example, to do our title lookup, we would write the following program:</p>
  <codeblock id="x-17" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test.xml"
    let cursor = fromDocument doc
    print $ T.concat $
            child cursor &gt;&gt;= element "head" &gt;&gt;= child
                         &gt;&gt;= element "title" &gt;&gt;= descendant &gt;&gt;= content</codeblock>
  <p id="x-18">What this says is:</p>
  <ol id="ol_d37c1613-8879-4be8-862c-9823d88f5b90">
   <li id="x-19">Get me all the child nodes of the root element</li>
   <li id="x-20">Filter down to only the elements named "head"</li>
   <li id="x-21">Get all the children of all those head elements</li>
   <li id="x-22">Filter down to only the elements named "title"</li>
   <li id="x-23">Get all the descendants of all those title elements. (A descendant is a child, or a
    descendant of a child. Yes, that was a recursive definition.)</li>
   <li id="x-24">Get only the text nodes.</li>
  </ol>
  <p id="x-25">So for the input document:</p>
  <codeblock id="x-26" outputclass="xml">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My &lt;b&gt;Title&lt;/b&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;Foo bar baz&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  <p id="x-27">We end up with the output <codeph id="x-28">My Title</codeph>. This is all well and good, but it's much
   more verbose than the XPath solution. To combat this verbosity, Aristid Breitkreuz added a set of
   operators to the Cursor module to handle many common cases. So we can rewrite our example as:</p>
  <codeblock id="x-29" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test.xml"
    let cursor = fromDocument doc
    print $ T.concat $
        cursor $/ element "head" &amp;/ element "title" &amp;// content</codeblock>
  <p id="x-30"><codeph id="x-31">$/</codeph> says to apply the axis on the right to the children of
   the cursor on the left. <codeph id="x-32">&amp;/</codeph> is almost identical, but is instead
   used to combine two axes together. This is a general rule in <codeph id="x-53"
    >Text.XML.Cursor</codeph>: operators beginning with $ directly apply an axis, while &amp; will
   combine two together. <codeph id="x-33">&amp;//</codeph> is used for applying an axis to all
   descendants.</p>
  <p id="x-34">Let's go for a more complex, if more contrived, example. We have a document that looks
   like:</p>
  <codeblock id="x-35" outputclass="xml">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Headings&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;hgroup&gt;
            &lt;h1&gt;Heading 1 foo&lt;/h1&gt;
            &lt;h2 class="foo"&gt;Heading 2 foo&lt;/h2&gt;
        &lt;/hgroup&gt;
        &lt;hgroup&gt;
            &lt;h1&gt;Heading 1 bar&lt;/h1&gt;
            &lt;h2 class="bar"&gt;Heading 2 bar&lt;/h2&gt;
        &lt;/hgroup&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  <p id="x-36">We want to get the content of all the <codeph id="x-37">h1</codeph> tags which precede an
    <codeph id="x-38">h2</codeph> tag with a <codeph id="x-39">class</codeph> attribute of "bar". To perform this
   convoluted lookup, we can write:</p>
  <codeblock id="x-40" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile)
import Text.XML
import Text.XML.Cursor
import qualified Data.Text as T

main :: IO ()
main = do
    doc &lt;- readFile def "test2.xml"
    let cursor = fromDocument doc
    print $ T.concat $
        cursor $// element "h2"
               &gt;=&gt; attributeIs "class" "bar"
               &gt;=&gt; precedingSibling
               &gt;=&gt; element "h1"
               &amp;// content</codeblock>
  <p id="x-41">Let's step through that. First we get all h2 elements in the document.
    (<codeph id="x-54">$//</codeph> gets all descendants of the root element.) Then we filter out only those
   with <codeph id="x-55">class=bar</codeph>. That <codeph id="x-42">&gt;=&gt;</codeph> operator is actually
   the standard operator from <apiname id="x-43">base:Control.Monad</apiname>; yet another advantage
   of the monad instance of lists. <codeph id="x-56">precedingSibling</codeph> finds all nodes that come
   before our node <b id="x-44">and</b> share the same parent. (There is also a <codeph id="x-45">preceding</codeph> axis which takes all elements earlier in the tree.) We then take just the
    <codeph id="x-57">h1</codeph> elements, and then grab their content.</p>
  <note id="x-46">The equivalent XPath, for comparison, would be <codeph id="x-47">//h2[@class =
    'bar']/preceding-sibling::h1//text()</codeph>.</note>
  <p id="x-48">While the cursor API isn't quite as succinct as XPath, it has the advantages of being standard
   Haskell code, and of type safety.</p>
 </conbody>
</concept>
