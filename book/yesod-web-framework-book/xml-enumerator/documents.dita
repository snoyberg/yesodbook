<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Documents</title>
 <conbody id="x-2">
  <p id="x-3">So now we have elements and nodes, but what about an entire document? Let's just lay out the
   datatypes:</p>
  <codeblock id="x-4" outputclass="haskell">data Document = Document
    { documentPrologue :: Prologue
    , documentRoot :: Element
    , documentEpilogue :: [Miscellaneous]
    }

data Prologue = Prologue
    { prologueBefore :: [Miscellaneous]
    , prologueDoctype :: Maybe Doctype
    , prologueAfter :: [Miscellaneous]
    }

data Miscellaneous
    = MiscInstruction Instruction
    | MiscComment Text

data Doctype = Doctype
    { doctypeName :: Text
    , doctypeID :: Maybe ExternalID
    }

data ExternalID
    = SystemID Text
    | PublicID Text Text</codeblock>
  <p id="x-5">The XML spec says that a document has a single root element
    (<codeph id="x-9">documentRoot</codeph>). It also has an optional doctype statement. Before and after
   both the doctype and the root element, you are allowed to have comments and processing
   instructions. (You can also have whitespace, but that is ignored in the parsing.)</p>
  <p id="x-6">So what's up with the doctype? Well, it specifies the root element of the document, and then
   optional public and system identifiers. These are used to refer to DTD files, which give more
   information about the file (e.g., validation rules, default attributes, entity resolution). Let's
   see some examples:</p>
  <codeblock id="x-7" outputclass="xml">&lt;!DOCTYPE root&gt; &lt;!-- no external identifier --&gt;
&lt;!DOCTYPE root SYSTEM "root.dtd"&gt; &lt;!-- a system identifier --&gt;
&lt;!DOCTYPE root PUBLIC "My Root Public Identifier" "root.dtd"&gt; &lt;!-- public identifiers have a system ID as well --&gt;</codeblock>
  <p id="x-8">And that, my friends, is the entire XML data model. For many parsing purposes, you'll
   be able to simply ignore the entire <codeph id="x-10">Document</codeph> datatype and go immediately to the
    <codeph id="x-11">documentRoot</codeph>.</p>
 </conbody>
</concept>
