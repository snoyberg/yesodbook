<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Synopsis</title>
 <conbody id="x-2">
  <fig id="x-3">
   <title id="x-4">Input XML file</title>
   <codeblock id="x-5" outputclass="xml">&lt;document title="My Title"&gt;
    &lt;para&gt;This is a paragraph. It has &lt;em&gt;emphasized&lt;/em&gt; and &lt;strong&gt;strong&lt;/strong&gt; words.&lt;/para&gt;
    &lt;image href="myimage.png"/&gt;
&lt;/document&gt;</codeblock>
  </fig>
  <fig id="x-6">
   <title id="x-7">Haskell code</title>
   <codeblock id="x-8" outputclass="haskell">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Prelude hiding (readFile, writeFile)
import Text.XML
import Text.Hamlet.XML

main :: IO ()
main = do
    -- readFile will throw any parse errors as runtime exceptions
    -- def uses the default settings
    Document prologue root epilogue &lt;- readFile def "input.xml"

    -- root is the root element of the document, let's modify it
    let root' = transform root

    -- And now we write out. Let's indent our output
    writeFile def
        { rsPretty = True
        } "output.html" $ Document prologue root' epilogue

-- We'll turn out &lt;document&gt; into an XHTML document
transform :: Element -&gt; Element
transform (Element _name attrs children) = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;
        $maybe title &lt;- lookup "title" attrs
            \#{title}
        $nothing
            Untitled Document
&lt;body&gt;
    $forall child &lt;- children
        ^{goNode child}
|]

goNode :: Node -&gt; [Node]
goNode (NodeElement e) = [NodeElement $ goElem e]
goNode (NodeContent t) = [NodeContent t]
goNode (NodeComment _) = [] -- hide comments
goNode (NodeInstruction _) = [] -- and hide processing instructions too

-- convert each source element to its XHTML equivalent
goElem :: Element -&gt; Element
goElem (Element "para" attrs children) =
    Element "p" attrs $ concatMap goNode children
goElem (Element "em" attrs children) =
    Element "i" attrs $ concatMap goNode children
goElem (Element "strong" attrs children) =
    Element "b" attrs $ concatMap goNode children
goElem (Element "image" attrs _children) =
    Element "img" (map fixAttr attrs) [] -- images can't have children
  where
    fixAttr ("href", value) = ("src", value)
    fixAttr x = x
goElem (Element name attrs children) =
    -- don't know what to do, just pass it through...
    Element name attrs $ concatMap goNode children</codeblock>
  </fig>
  <fig id="x-9">
   <title id="x-10">Output XHTML</title>
   <codeblock id="x-11" outputclass="html">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;
            My Title
        &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;
            This is a paragraph. It has 
            &lt;i&gt;
                emphasized
            &lt;/i&gt;
            and 
            &lt;b&gt;
                strong
            &lt;/b&gt;
            words.
        &lt;/p&gt;
        &lt;img src="myimage.png"/&gt;
    &lt;/body&gt;
&lt;/html&gt;</codeblock>
  </fig>
 </conbody>
</concept>
