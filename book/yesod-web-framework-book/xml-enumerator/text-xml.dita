<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Text.XML</title>
 <conbody>
  <p>The recommended entry point to xml-enumerator is the <apiname>xml-enumerator:Text.XML</apiname>
   module. This module exports all of the datatypes you'll need to manipulate XML in a DOM fashion,
   as well as a number of different approaches for parsing and rendering XML content. Let's start
   with the simple
   ones:<codeblock outputclass="haskell">readFile_ :: ParseSettings  -> FilePath -> IO Document
writeFile :: RenderSettings -> FilePath -> Document -> IO ()</codeblock>This
   introduces the <codeph>ParseSettings</codeph> and <codeph>RenderSettings</codeph> datatypes. You
   can use these to modify the behavior of the parser and renderer, such as adding character
   entities and turning on pretty (i.e., indented) output. Both these types are instances of the
    <apiname>data-default:Data.Default:Default</apiname> typeclass, so you can simply use
    <codeph>def</codeph> when these need to be supplied. That is how we will supply these values
   through the rest of the chapter; please see the API docs for more information.</p>
  <p>In addition to <codeph>readFile_</codeph>, there is also <codeph>readFile</codeph> which
   returns <codeph>Either SomeException Document</codeph>. Most of the parsing functions provide
   such a dual set of functions, where the underscore suffix indicates that any parse errors will
   simply be thrown as exceptions.</p>
  <p>It's worth pointing out that in addition to the file-based API, there is also a text- and
   bytestring-based API. The bytestring-powered functions all perform intelligent encoding
   detections, and support UTF-8, UTF-16 and UTF-32, in either big or little endian, with and
   without a Byte-Order Marker (BOM). All output is generated in UTF-8.</p>
  <p>For complex data lookups, we recommend using the higher-level cursors API. The standard
   Text.XML API not only forms the basis for that higher level, but is also a great API for simple
   XML transformations and for XML generation. See the synopsis for an example.</p>
 </conbody>
</concept>
