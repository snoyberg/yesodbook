<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Types</title>
 <conbody id="x-2">
  <p id="x-3">Let's take a bottom-up approach to analyzing types. This section will also serve as a primer on
   the XML data model itself, so don't worry if you're not completely familiar with it.</p>
  <p id="x-4">I think the first place where Haskell really shows its strength is with the
    <apiname id="x-5">xml-types:Data.XML.Types:Name</apiname> datatype. Many languages (like Java) struggle
   with properly expressing names. The issue is that there are in fact three components to a name:
   its local name, its namespace (optional), and its prefix (also optional). Let's look at some XML
   to explain:</p>
  <codeblock id="x-6" outputclass="xml">&lt;no-namespace/&gt;
&lt;no-prefix xmlns="first-namespace" first-attr="value1"/&gt;
&lt;foo:with-prefix xmlns:foo="second-namespace" foo:second-attr="value2"/&gt;</codeblock>
  <p id="x-7">The first tag has a local name of <codeph id="x-8">no-namespace</codeph>, and no
   namespace or prefix. The second tag (local name: <codeph id="x-9">no-prefix</codeph>) <i id="x-10">also</i> has no prefix, but it does have a namespace (<codeph id="x-11">first-namespace</codeph>). <codeph id="x-24">first-attr</codeph>, however, does <i id="x-12">not</i>
   inherit that namespace: attribute namespaces must always be explicitly set with a prefix.</p>
  <note id="x-13">Namespaces are almost always URIs of some sort, though there is nothing in any specification
   requiring that it be so.</note>
  <p id="x-14">The third tag has a local name of <codeph id="x-15">with-prefix</codeph>, a prefix of
    <codeph id="x-16">foo</codeph> and a namespace of <codeph id="x-17">second-namespace</codeph>.
   Its attribute has a <codeph id="x-25">second-attr</codeph> local name and the same prefix and namespace.
   The <codeph id="x-26">xmlns</codeph> and <codeph id="x-27">xmlns:foo</codeph> attributes are part of the namespace
   specification, and are not considered attributes of their respective elements.</p>
  <p id="x-18">So let's review what we need from a name: every name has a local name, and it can optionally
   have a prefix and namespace. Seems like a simple fit for a record type:</p>
  <codeblock id="x-19" outputclass="haskell">data Name = Name
    { nameLocalName :: Text
    , nameNamespace :: Maybe Text
    , namePrefix :: Maybe Text
    }</codeblock>
  <p id="x-20">According the the XML namespace standard, two names are considered equivalent if they
   have the same localname and namespace. In other words, the prefix is not important. Therefore,
    <codeph id="x-28">xml-types</codeph> defines <codeph id="x-29">Eq</codeph> and <codeph id="x-30">Ord</codeph> instances that
   ignore the prefix.</p>
  <p id="x-21">The last class instance worth mentioning is <codeph id="x-31">IsString</codeph>. It would be
   very tedious to have to manually type out <codeph id="x-22">Name "p" Nothing Nothing</codeph>
   every time we want a paragraph. If you turn on <codeph id="x-32">OverloadedStrings</codeph>,
    <codeph id="x-33">"p"</codeph> will resolve to that all by itself! In addition, the
    <codeph id="x-34">IsString</codeph> instance recognizes something called Clark notation, which allows you
   to prefix the namespace surrounded in curly brackets. In other words:</p>
  <codeblock id="x-23" outputclass="haskell">"{namespace}element" == Name "element" (Just "namespace") Nothing
"element" == Name "element" Nothing Nothing</codeblock>
 </conbody>
</concept>
