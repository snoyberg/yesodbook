<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="xml-hamlet">
 <title id="x-1">xml-hamlet</title>
 <conbody id="x-2">
  <p id="x-3" outputclass="haskell">Thanks to the simplicity of Haskell's data type system, creating
            XML content with the <codeph>Text.XML API</codeph> is easy, if a bit verbose. The
            following code:</p>
  <codeblock outputclass="haskell" id="x-4">{-# LANGUAGE OverloadedStrings #-}
import Text.XML
import Prelude hiding (writeFile)

main :: IO ()
main =
    writeFile def "test3.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" []
        [ NodeElement $ Element "head" []
            [ NodeElement $ Element "title" []
                [ NodeContent "My "
                , NodeElement $ Element "b" []
                    [ NodeContent "Title"
                    ]
                ]
            ]
        , NodeElement $ Element "body" []
            [ NodeElement $ Element "p" []
                [ NodeContent "foo bar baz"
                ]
            ]
        ]</codeblock>
  <p id="x-5">produces</p>
  <codeblock id="x-6" outputclass="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;My &lt;b&gt;Title&lt;/b&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;foo bar baz&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</codeblock>
  <p id="x-7">This is leaps and bounds easier than having to deal with an imperative, mutable-value-based API
   (cough, Java, cough), but it's far from pleasant, and obscures what we're really trying to
   achieve. To simplify things, we have the <apiname id="x-8">xml-hamlet</apiname> package, which using
   Quasi-Quotation to allow you to type in your XML in a natural syntax. For example, the above
   could be rewritten as:</p>
  <codeblock id="x-9" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
import Text.XML
import Text.Hamlet.XML
import Prelude hiding (writeFile)

main :: IO ()
main =
    writeFile def "test3.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;
        My #
        &lt;b&gt;Title
&lt;body&gt;
    &lt;p&gt;foo bar baz
|]</codeblock>
  <p id="x-10">Let's make a few points:</p>
  <ul id="ul_56cf6fac-3c78-4e75-b51a-7dfd6b087eeb">
   <li id="x-11">The syntax is almost identical to normal Hamlet, except URL-interpolation (@{...}) has been
    removed. As such:<ul id="ul_db2c4193-433e-48a6-abe9-29ca9b3835bc">
     <li id="x-12">No close tags.</li>
     <li id="x-13">Whitespace-sensitive.</li>
     <li id="x-14">If you want to have whitespace at the end of a line, use a # at the end. At the beginning,
      use a backslash.</li>
    </ul></li>
   <li id="x-15">An <codeph>xml</codeph> interpolation will return a list of <codeph id="x-16"
                    >Node</codeph>s. So you still need to wrap up the output in all the normal
                    <codeph>Document</codeph> and root <codeph>Element</codeph> constructs.</li>
   <li id="x-17">There is no support for the special <codeph>.class</codeph> and
                    <codeph>#id</codeph> attribute forms.</li>
  </ul>
  <p id="x-18">And like normal Hamlet, you can use variable interpolation and control structures. So a
   slightly more complex example would be:</p>
  <codeblock id="x-19" outputclass="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
import Text.XML
import Text.Hamlet.XML
import Prelude hiding (writeFile)
import Data.Text (Text, pack)

data Person = Person
    { personName :: Text
    , personAge :: Int
    }

people :: [Person]
people =
    [ Person "Michael" 26
    , Person "Miriam" 25
    , Person "Eliezer" 3
    , Person "Gavriella" 1
    ]

main :: IO ()
main =
    writeFile def "people.xml" $ Document (Prologue [] Nothing []) root []
  where
    root = Element "html" [] [xml|
&lt;head&gt;
    &lt;title&gt;Some People
&lt;body&gt;
    &lt;h1&gt;Some People
    $if null people
        &lt;p&gt;There are no people.
    $else
        &lt;dl&gt;
            $forall person &lt;- people
                ^{personNodes person}
|]

personNodes :: Person -&gt; [Node]
personNodes person = [xml|
&lt;dt&gt;#{personName person}
&lt;dd&gt;#{pack $ show $ personAge person}
|]</codeblock>
  <p id="x-20">A few more notes:</p>
  <ul id="ul_4f926e00-4348-4801-97a1-a9d95fb18a04">
   <li id="x-21">The caret-interpolation (^{...}) takes a list of nodes, and so can easily embed
                other <codeph>xml</codeph>-quotations.</li>
   <li id="x-22">Unlike Hamlet, hash-interpolations (#{...}) are not polymorphic, and can <i
                    id="x-23">only</i> accept <codeph>Text</codeph> values.</li>
  </ul>
 </conbody>
</concept>
