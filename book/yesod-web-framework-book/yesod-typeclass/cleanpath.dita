<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="cleanpath"><title id="x-1">cleanPath</title><conbody id="x-2"><p id="cp1">The flip side to <codeph id="x1">joinPath</codeph> is <codeph id="x2">cleanPath</codeph>. Let's look at how it gets used in the dispatch process:</p><ol id="x3"><li id="x4">The path info requested by the user is split into a series of path pieces.</li><li id="x6">We pass the path pieces to the <codeph id="x-3">cleanPath</codeph> function.</li><li id="x7">If <codeph id="x-4">cleanPath</codeph> indicates a redirect (a <codeph id="x-5">Left</codeph> response),
                then a 301 response is sent to the client. This is used to force canonical URLs (eg,
                remove extra slashes).</li><li id="x8">Otherwise, we try to dispatch using the response from <codeph id="x-6">cleanPath</codeph> (a
                    <codeph id="x-7">Right</codeph>). If this works, we return a response. Otherwise, we
                return a 404.</li></ol><p id="cp2">This combination allows subsites to retain full control of how their URLs appear, yet allows master sites to have modified URLs. As a simple example, let's see how we could modify Yesod to always produce trailing slashes on URLs:</p><codeblock id="x9" outputclass="haskell">-- START
{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses, TemplateHaskell, OverloadedStrings #-}
import Yesod
import Network.HTTP.Types (encodePath)
import Blaze.ByteString.Builder.Char.Utf8 (fromText)
import qualified Data.Text as T
import qualified Data.Text.Encoding as TE
import Control.Arrow ((***))
import Data.Monoid (mappend)

data Slash = Slash

mkYesod "Slash" [parseRoutes|
/ RootR GET
/foo FooR GET
|]

instance Yesod Slash where
    joinPath _ ar pieces' qs' =
        fromText ar `mappend` encodePath pieces qs
      where
        qs = map (TE.encodeUtf8 *** go) qs'
        go "" = Nothing
        go x = Just $ TE.encodeUtf8 x
        pieces = pieces' ++ [""]

    -- We want to keep canonical URLs. Therefore, if the URL is missing a
    -- trailing slash, redirect. But the empty set of pieces always stays the
    -- same.
    cleanPath _ [] = Right []
    cleanPath _ s
        | dropWhile (not . T.null) s == [""] = -- the only empty string is the last one
            Right $ init s
        -- Since joinPath will append the missing trailing slash, we simply
        -- remove empty pieces.
        | otherwise = Left $ filter (not . T.null) s

getRootR = defaultLayout [whamlet|
&lt;p>
    &lt;a href=@{RootR}&gt;RootR
&lt;p>
    &lt;a href=@{FooR}&gt;FooR
|]

getFooR = getRootR

main = warpDebug 3000 Slash</codeblock><p id="cp3">First, let's look at our <codeph id="x-8">joinPath</codeph> implementation. This is copied almost
            verbatim from the default Yesod implementation, with one difference: we append an extra
            empty string to the end. When dealing with path pieces, an empty string will append
            another slash. So adding an extra empty string will force a trailing slash.</p><p id="cp4"><codeph id="x-9">cleanPath</codeph> is a little bit trickier. First, we check for the empty path
            like before, and if so pass it through as-is. We use Right to indicate that a redirect
            is not necessary. The next clause is actually checking for two different possible URL
            issues:</p><ul id="x11"><li id="x12">There is a double slash, which would show up as an empty string in the middle of our paths.</li><li id="x13">There is a missing trailing slash, which would show up as the last piece not being an empty string.</li></ul><p id="cp5">Assuming neither of those conditions hold, then only the last piece is empty, and we
            should dispatch based on all but the last piece. However, if this is not the case, we
            want to redirect to a canonical URL. In this case, we strip out all empty pieces and do
            not bother appending a trailing slash, since <codeph id="x-10">joinPath</codeph> will do that for
            us.</p></conbody></concept>
