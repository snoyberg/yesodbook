<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">External CSS and Javascript</title>
 <conbody id="x-2">
  <note id="in-scaffolding">The functionality described here is automatically included in the
   scaffolded site, so you don't need to worry about implementing this yourself.</note>
  <p id="x-3">One of the most powerful, and most intimidating, methods in the Yesod typeclass is
    <codeph id="x-4">addStaticContent</codeph>. Remember that a Widget consists of multiple
   components, including CSS and Javascript. How exactly does that CSS/JS arrive in the user's
   browser? By default, they are served in the <codeph id="x-24">&lt;head&gt;</codeph> of the page, inside
    <codeph id="x-25">&lt;style&gt;</codeph> and <codeph id="x-26">&lt;script&gt;</codeph> tags, respectively.</p>
  <p id="x-5">That might be simple, but it's far from efficient. Every page load will now require loading up
   the CSS/JS from scratch, even if nothing changed! What we really want is to store this content in
   an external file and then refer to it from the HTML.</p>
  <p id="x-6">This is where <codeph id="x-27">addStaticContent</codeph> comes in. It takes three arguments:
   the filename extension of the content (<codeph id="x-28">css</codeph> or <codeph id="x-29">js</codeph>), the
   mime-type of the content (<codeph id="x-30">text/css</codeph> or <codeph id="x-31">text/javascript</codeph>) and the
   content itself. It will then return one of three possible results:</p>
  <dl id="x-7">
   <dlentry id="x-8">
    <dt id="x-9">Nothing</dt>
    <dd id="x-10">No static file saving occurred; embed this content directly in the HTML. This is the default
     behavior.</dd>
   </dlentry>
   <dlentry id="x-11">
    <dt id="x-12">Just (Left Text)</dt>
    <dd id="x-13">This content was saved in an external file, and use the given textual link to refer to
     it.</dd>
   </dlentry>
   <dlentry id="x-14">
    <dt id="x-15">Just (Right (Route a, Query))</dt>
    <dd id="x-16">Same, but now use a type-safe URL along with some query string parameters.</dd>
   </dlentry>
  </dl>
  <p id="x-17">The <codeph id="x-32">Left</codeph> result is useful if you want to store your static files on
   an external server, such as a CDN or memory-backed server. The <codeph id="x-33">Right</codeph> result is
   more commonly used, and ties in very well with the static subsite. This is the recommended
   approach for most applications, and is provided by the scaffolded site by default.</p>
  <note id="x-18">You might be wondering: if this is the recommended approach, why isn't it the default? The
   problem is that it makes a number of assumptions that don't universally hold: your application
   has a static subsite, and the location of your static files.</note>
  <p id="x-19">The scaffolded <codeph id="x-34">addStaticContent</codeph> does a number of intelligent things
   to help you out:</p>
  <ul id="ul_vlr_nmg_sd">
   <li id="x-20">It automatically minifies your Javascript using the <apiname id="x-21">hjsmin</apiname> package.</li>
   <li id="x-22">It names the output files based on a hash of the file contents. This means you can set your
    cache headers to far in the future without fears of stale content.</li>
   <li id="x-23">Also, since filenames are based on hashes, you can be guaranteed that a file doesn't need to
    be written if a file with the same name already exists. The scaffold code automatically checks
    for the existence of that file, and avoids the costly disk I/O of a write if it's not
    necessary.</li>
  </ul>
 </conbody>
</concept>
