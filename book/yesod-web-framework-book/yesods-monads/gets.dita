<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="gets">
 <title>Example: Request information</title>
 <conbody>
  <p>Likewise, you can get request information. Here we can determine the sort order of a list based
   on a GET parameter.</p>
  <codeblock outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, TypeFamilies, MultiParamTypeClasses, GADTs #-}
import Yesod
import Data.Text (Text)
import Data.List (sortBy)
import Data.Ord (comparing)

data Person = Person
    { personName :: Text
    , personAge :: Int
    }

people :: [Person]
people =
    [ Person "Miriam" 25
    , Person "Eliezer" 3
    , Person "Michael" 26
    , Person "Gavriella" 1
    ]

data People = People

mkYesod "People" [parseRoutes|
/ RootR GET
|]

instance Yesod People where
    approot _ = ""

instance RenderMessage People FormMessage where
    renderMessage _ _ = defaultFormMessage


getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;p>
    &lt;a href="?sort=name">Sort by name
    \ | #
    &lt;a href="?sort=age">Sort by age
    \ | #
    &lt;a href="?">No sort
^{showPeople}
|]

showPeople :: Widget
showPeople = do
    msort &lt;- lift $ runInputGet $ iopt textField "sort"
    let people' =
            case msort of
                Just "name" -> sortBy (comparing personName) people
                Just "age"  -> sortBy (comparing personAge)  people
                _           -> people
    [whamlet|
&lt;dl>
    $forall person &lt;- people'
        &lt;dt>#{personName person}
        &lt;dd>#{show $ personAge person}
|]

main :: IO ()
main = warpDebug 3000 People</codeblock>
  <p>Once again, all we need to do is <codeph>lift</codeph> our normal Handler code (in this case,
   runInputGet) to have it run in our Widget.</p>
 </conbody>
</concept>
